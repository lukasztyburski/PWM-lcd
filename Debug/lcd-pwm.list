
lcd-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000074  08003874  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003874  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ee2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019cd  00000000  00000000  00029f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  0002b950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002c380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a34  00000000  00000000  0002ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bfb  00000000  00000000  000446fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000882de  00000000  00000000  0004d2f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d55d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce8  00000000  00000000  000d5650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003754 	.word	0x08003754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003754 	.word	0x08003754

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <delay>:


extern TIM_HandleTypeDef timer;

void delay (uint16_t delay_param)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <delay+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay_param);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <delay+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <delay+0x14>
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000a0 	.word	0x200000a0

08000684 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <send_to_lcd+0x9c>)
 800069c:	f001 f8aa 	bl	80017f4 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	2108      	movs	r1, #8
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <send_to_lcd+0xa0>)
 80006b2:	f001 f89f 	bl	80017f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	2104      	movs	r1, #4
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <send_to_lcd+0xa0>)
 80006c8:	f001 f894 	bl	80017f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	085b      	lsrs	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <send_to_lcd+0xa0>)
 80006de:	f001 f889 	bl	80017f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <send_to_lcd+0xa0>)
 80006f0:	f001 f880 	bl	80017f4 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <send_to_lcd+0x9c>)
 80006fc:	f001 f87a 	bl	80017f4 <HAL_GPIO_WritePin>
	delay (20);
 8000700:	2014      	movs	r0, #20
 8000702:	f7ff ffa7 	bl	8000654 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <send_to_lcd+0x9c>)
 800070e:	f001 f871 	bl	80017f4 <HAL_GPIO_WritePin>
	delay (20);
 8000712:	2014      	movs	r0, #20
 8000714:	f7ff ff9e 	bl	8000654 <delay>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010c00 	.word	0x40010c00
 8000724:	40010800 	.word	0x40010800

08000728 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	091b      	lsrs	r3, r3, #4
 8000736:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffa1 	bl	8000684 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff98 	bl	8000684 <send_to_lcd>
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lcd_send_data>:

void lcd_send_data (char data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff87 	bl	8000684 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff7e 	bl	8000684 <send_to_lcd>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <lcd_clear>:

void lcd_clear (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ffc7 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(2);
 800079a:	2002      	movs	r0, #2
 800079c:	f000 fda0 	bl	80012e0 <HAL_Delay>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    switch (row)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <lcd_put_cur+0x16>
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d005      	beq.n	80007c4 <lcd_put_cur+0x20>
 80007b8:	e009      	b.n	80007ce <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	603b      	str	r3, [r7, #0]
            break;
 80007c2:	e004      	b.n	80007ce <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007ca:	603b      	str	r3, [r7, #0]
            break;
 80007cc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffa8 	bl	8000728 <lcd_send_cmd>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <lcd_init>:


void lcd_init (void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007e4:	2032      	movs	r0, #50	; 0x32
 80007e6:	f000 fd7b 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007ea:	2030      	movs	r0, #48	; 0x30
 80007ec:	f7ff ff9c 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80007f0:	2005      	movs	r0, #5
 80007f2:	f000 fd75 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007f6:	2030      	movs	r0, #48	; 0x30
 80007f8:	f7ff ff96 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fd6f 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000802:	2030      	movs	r0, #48	; 0x30
 8000804:	f7ff ff90 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(10);
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fd69 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800080e:	2020      	movs	r0, #32
 8000810:	f7ff ff8a 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(10);
 8000814:	200a      	movs	r0, #10
 8000816:	f000 fd63 	bl	80012e0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f7ff ff84 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fd5d 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000826:	2008      	movs	r0, #8
 8000828:	f7ff ff7e 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fd57 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ff78 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fd51 	bl	80012e0 <HAL_Delay>
	HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fd4e 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000844:	2006      	movs	r0, #6
 8000846:	f7ff ff6f 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 fd48 	bl	80012e0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000850:	200c      	movs	r0, #12
 8000852:	f7ff ff69 	bl	8000728 <lcd_send_cmd>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000862:	e006      	b.n	8000872 <lcd_send_string+0x18>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff75 	bl	800075c <lcd_send_data>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f4      	bne.n	8000864 <lcd_send_string+0xa>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <MX_GPIO_Init+0x120>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a41      	ldr	r2, [pc, #260]	; (80009a4 <MX_GPIO_Init+0x120>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a3b      	ldr	r2, [pc, #236]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a35      	ldr	r2, [pc, #212]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008e6:	f043 0308 	orr.w	r3, r3, #8
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	210f      	movs	r1, #15
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <MX_GPIO_Init+0x124>)
 80008fe:	f000 ff79 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RW_Pin|RS_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <MX_GPIO_Init+0x128>)
 800090a:	f000 ff73 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN1_Pin;
 800090e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_GPIO_Init+0x12c>)
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4824      	ldr	r0, [pc, #144]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000924:	f000 fe0c 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000928:	230f      	movs	r3, #15
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <MX_GPIO_Init+0x124>)
 8000940:	f000 fdfe 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_Pin|RW_Pin|RS_Pin;
 8000944:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_GPIO_Init+0x128>)
 800095e:	f000 fdef 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin|BTN2_Pin|BTN1_Pin;
 8000962:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x12c>)
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_GPIO_Init+0x128>)
 8000978:	f000 fde2 	bl	8001540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2017      	movs	r0, #23
 8000982:	f000 fda6 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000986:	2017      	movs	r0, #23
 8000988:	f000 fdbf 	bl	800150a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2028      	movs	r0, #40	; 0x28
 8000992:	f000 fd9e 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f000 fdb7 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	10210000 	.word	0x10210000
 80009b4:	40011000 	.word	0x40011000

080009b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char buffer[20] = "INITIALIZATION";
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <main+0x118>)
 80009c0:	1d3c      	adds	r4, r7, #4
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	c407      	stmia	r4!, {r0, r1, r2}
 80009c6:	8023      	strh	r3, [r4, #0]
 80009c8:	3402      	adds	r4, #2
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	7023      	strb	r3, [r4, #0]
 80009ce:	f107 0313 	add.w	r3, r7, #19
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	711a      	strb	r2, [r3, #4]
	uint16_t oldPeriod = period;
 80009d8:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <main+0x11c>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	83fb      	strh	r3, [r7, #30]
	uint16_t oldDuty = duty;
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <main+0x120>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	83bb      	strh	r3, [r7, #28]
	bool valueChanged = false;
 80009e4:	2300      	movs	r3, #0
 80009e6:	76fb      	strb	r3, [r7, #27]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009e8:	f000 fc18 	bl	800121c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009ec:	f000 f884 	bl	8000af8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009f0:	f7ff ff48 	bl	8000884 <MX_GPIO_Init>
	MX_TIM3_Init();
 80009f4:	f000 fb20 	bl	8001038 <MX_TIM3_Init>
	MX_TIM2_Init();
 80009f8:	f000 faa8 	bl	8000f4c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	MAX_PERIOD = htim2.Instance->ARR;
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <main+0x124>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <main+0x128>)
 8000a06:	801a      	strh	r2, [r3, #0]
	PRESCALER = htim2.Instance->PSC;
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <main+0x124>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <main+0x12c>)
 8000a12:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8000a14:	4834      	ldr	r0, [pc, #208]	; (8000ae8 <main+0x130>)
 8000a16:	f001 fb57 	bl	80020c8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	482f      	ldr	r0, [pc, #188]	; (8000adc <main+0x124>)
 8000a1e:	f001 fbf5 	bl	800220c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <main+0x120>)
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <main+0x124>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34

	lcd_init();
 8000a2c:	f7ff fed8 	bl	80007e0 <lcd_init>
	lcd_send_string(buffer);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff11 	bl	800085a <lcd_send_string>
	HAL_Delay(3000);
 8000a38:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a3c:	f000 fc50 	bl	80012e0 <HAL_Delay>
	lcd_clear();
 8000a40:	f7ff fea6 	bl	8000790 <lcd_clear>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		__HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <main+0x11c>)
 8000a46:	881a      	ldrh	r2, [r3, #0]
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <main+0x124>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <main+0x11c>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <main+0x124>)
 8000a56:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <main+0x120>)
 8000a5a:	881a      	ldrh	r2, [r3, #0]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <main+0x124>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34

		valueChanged = check_value_change(oldDuty, oldPeriod);
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
 8000a64:	8bfa      	ldrh	r2, [r7, #30]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f90d 	bl	8000c88 <check_value_change>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	76fb      	strb	r3, [r7, #27]
		if (valueChanged) {
 8000a72:	7efb      	ldrb	r3, [r7, #27]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0e5      	beq.n	8000a44 <main+0x8c>
			lcd_clear();
 8000a78:	f7ff fe8a 	bl	8000790 <lcd_clear>
			lcd_put_cur(0, 0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fe90 	bl	80007a4 <lcd_put_cur>
			sprintf(buffer, "Freq: %d KHz", calculacte_frequency());
 8000a84:	f000 f8c0 	bl	8000c08 <calculacte_frequency>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4917      	ldr	r1, [pc, #92]	; (8000aec <main+0x134>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fa4e 	bl	8002f30 <siprintf>
			lcd_send_string(buffer);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fedf 	bl	800085a <lcd_send_string>
			oldPeriod = period;
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <main+0x11c>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	83fb      	strh	r3, [r7, #30]

			lcd_put_cur(1, 0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff fe7d 	bl	80007a4 <lcd_put_cur>
			sprintf(buffer, "Duty: %d", calculate_duty());
 8000aaa:	f000 f8c5 	bl	8000c38 <calculate_duty>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	490f      	ldr	r1, [pc, #60]	; (8000af0 <main+0x138>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fa3b 	bl	8002f30 <siprintf>
			lcd_send_string(buffer);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fecc 	bl	800085a <lcd_send_string>
			lcd_send_string("%");
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <main+0x13c>)
 8000ac4:	f7ff fec9 	bl	800085a <lcd_send_string>
			oldDuty = duty;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <main+0x120>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	83bb      	strh	r3, [r7, #28]
		__HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000ace:	e7b9      	b.n	8000a44 <main+0x8c>
 8000ad0:	0800378c 	.word	0x0800378c
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	200000e8 	.word	0x200000e8
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	2000009e 	.word	0x2000009e
 8000ae8:	200000a0 	.word	0x200000a0
 8000aec:	0800376c 	.word	0x0800376c
 8000af0:	0800377c 	.word	0x0800377c
 8000af4:	08003788 	.word	0x08003788

08000af8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fa0a 	bl	8002f20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b22:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fe87 	bl	8001854 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x58>
		Error_Handler();
 8000b4c:	f000 f93c 	bl	8000dc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f8f2 	bl	8001d54 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x82>
		Error_Handler();
 8000b76:	f000 f927 	bl	8000dc8 <Error_Handler>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	; 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	 } else if (GPIO_Pin == BTN4_Pin) {
	 if (duty < period)
	 duty++;
	 }
	 */
	int i = 500000;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b90:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == BTN1_Pin) {
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b98:	d109      	bne.n	8000bae <HAL_GPIO_EXTI_Callback+0x2a>
		while (i)
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x1e>
			i--;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
		while (i)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f9      	bne.n	8000b9c <HAL_GPIO_EXTI_Callback+0x18>
		increase_duty();
 8000ba8:	f000 f88c 	bl	8000cc4 <increase_duty>
	} else if (GPIO_Pin == BTN4_Pin) {
		while (i)
			i--;
		decrease_frequency();
	}
}
 8000bac:	e025      	b.n	8000bfa <HAL_GPIO_EXTI_Callback+0x76>
	} else if (GPIO_Pin == BTN2_Pin) {
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2b80      	cmp	r3, #128	; 0x80
 8000bb2:	d109      	bne.n	8000bc8 <HAL_GPIO_EXTI_Callback+0x44>
		while (i)
 8000bb4:	e002      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x38>
			i--;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
		while (i)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f9      	bne.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x32>
		decrease_duty();
 8000bc2:	f000 f8ad 	bl	8000d20 <decrease_duty>
}
 8000bc6:	e018      	b.n	8000bfa <HAL_GPIO_EXTI_Callback+0x76>
	} else if (GPIO_Pin == BTN3_Pin) {
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	2b40      	cmp	r3, #64	; 0x40
 8000bcc:	d109      	bne.n	8000be2 <HAL_GPIO_EXTI_Callback+0x5e>
		while (i)
 8000bce:	e002      	b.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x52>
			i--;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
		while (i)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f9      	bne.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x4c>
		increase_frequency();
 8000bdc:	f000 f8c8 	bl	8000d70 <increase_frequency>
}
 8000be0:	e00b      	b.n	8000bfa <HAL_GPIO_EXTI_Callback+0x76>
	} else if (GPIO_Pin == BTN4_Pin) {
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	2b20      	cmp	r3, #32
 8000be6:	d108      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x76>
		while (i)
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x6c>
			i--;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
		while (i)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f9      	bne.n	8000bea <HAL_GPIO_EXTI_Callback+0x66>
		decrease_frequency();
 8000bf6:	f000 f8e1 	bl	8000dbc <decrease_frequency>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0007a120 	.word	0x0007a120

08000c08 <calculacte_frequency>:

int calculacte_frequency() {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return CLOCK / ((period + 1) * (PRESCALER + 1));		  // / 1000;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <calculacte_frequency+0x24>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <calculacte_frequency+0x28>)
 8000c14:	8812      	ldrh	r2, [r2, #0]
 8000c16:	3201      	adds	r2, #1
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <calculacte_frequency+0x2c>)
 8000c1e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000002 	.word	0x20000002
 8000c30:	2000009e 	.word	0x2000009e
 8000c34:	044aa200 	.word	0x044aa200

08000c38 <calculate_duty>:

int calculate_duty() {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
	float result;
	result = (float) duty / (float) period * 100;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <calculate_duty+0x44>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fb38 	bl	80002b8 <__aeabi_ui2f>
 8000c48:	4604      	mov	r4, r0
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <calculate_duty+0x48>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb32 	bl	80002b8 <__aeabi_ui2f>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4619      	mov	r1, r3
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fc39 	bl	80004d0 <__aeabi_fdiv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4908      	ldr	r1, [pc, #32]	; (8000c84 <calculate_duty+0x4c>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fb80 	bl	8000368 <__aeabi_fmul>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	607b      	str	r3, [r7, #4]

	return (int) result;
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fccb 	bl	8000608 <__aeabi_f2iz>
 8000c72:	4603      	mov	r3, r0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000002 	.word	0x20000002
 8000c84:	42c80000 	.word	0x42c80000

08000c88 <check_value_change>:

bool check_value_change(int oldDuty, int oldPeriod) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	if (oldDuty != duty || oldPeriod != period)
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <check_value_change+0x34>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d105      	bne.n	8000caa <check_value_change+0x22>
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <check_value_change+0x38>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d001      	beq.n	8000cae <check_value_change+0x26>
		return true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <check_value_change+0x28>
	else
		return false;
 8000cae:	2300      	movs	r3, #0

}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000002 	.word	0x20000002

08000cc4 <increase_duty>:

void increase_duty() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
	int oldDuty = calculate_duty();
 8000cca:	f7ff ffb5 	bl	8000c38 <calculate_duty>
 8000cce:	60f8      	str	r0, [r7, #12]
	int step = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
	int tmp;

	if (TIM2->CCR1 < TIM2->ARR)
 8000cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d216      	bcs.n	8000d12 <increase_duty+0x4e>
		do {
			duty++;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <increase_duty+0x58>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <increase_duty+0x58>)
 8000cee:	801a      	strh	r2, [r3, #0]
			tmp = calculate_duty();
 8000cf0:	f7ff ffa2 	bl	8000c38 <calculate_duty>
 8000cf4:	6078      	str	r0, [r7, #4]
			if (tmp == TIM2->ARR)
 8000cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d006      	beq.n	8000d10 <increase_duty+0x4c>
				break;
		} while ((tmp - oldDuty) < step);
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dcea      	bgt.n	8000ce4 <increase_duty+0x20>
}
 8000d0e:	e000      	b.n	8000d12 <increase_duty+0x4e>
				break;
 8000d10:	bf00      	nop
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000

08000d20 <decrease_duty>:

void decrease_duty() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
	int oldDuty = calculate_duty();
 8000d26:	f7ff ff87 	bl	8000c38 <calculate_duty>
 8000d2a:	60f8      	str	r0, [r7, #12]
	int step = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
	int tmp;

	if (TIM2->CCR1 > 0)
 8000d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d013      	beq.n	8000d62 <decrease_duty+0x42>
		do {
			duty--;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <decrease_duty+0x4c>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <decrease_duty+0x4c>)
 8000d44:	801a      	strh	r2, [r3, #0]
			tmp = calculate_duty();
 8000d46:	f7ff ff77 	bl	8000c38 <calculate_duty>
 8000d4a:	6078      	str	r0, [r7, #4]
			if (tmp == 0)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <decrease_duty+0x40>
				break;
		} while ((oldDuty - tmp) < step);
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dced      	bgt.n	8000d3a <decrease_duty+0x1a>
}
 8000d5e:	e000      	b.n	8000d62 <decrease_duty+0x42>
				break;
 8000d60:	bf00      	nop
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000

08000d70 <increase_frequency>:

void increase_frequency() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
	int oldFreq= calculacte_frequency();
 8000d76:	f7ff ff47 	bl	8000c08 <calculacte_frequency>
 8000d7a:	60f8      	str	r0, [r7, #12]
	int step = 10000;
 8000d7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d80:	60bb      	str	r3, [r7, #8]
	int tmp;

	if(period < MAX_PERIOD)
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <increase_frequency+0x44>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <increase_frequency+0x48>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d20e      	bcs.n	8000dac <increase_frequency+0x3c>
		do{
			period--;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <increase_frequency+0x44>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <increase_frequency+0x44>)
 8000d98:	801a      	strh	r2, [r3, #0]
			tmp = calculacte_frequency();
 8000d9a:	f7ff ff35 	bl	8000c08 <calculacte_frequency>
 8000d9e:	6078      	str	r0, [r7, #4]

		}while((tmp - oldFreq) < step);
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dcf0      	bgt.n	8000d8e <increase_frequency+0x1e>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000002 	.word	0x20000002
 8000db8:	2000009c 	.word	0x2000009c

08000dbc <decrease_frequency>:

void decrease_frequency() {
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_MspInit+0x5c>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <HAL_MspInit+0x5c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_MspInit+0x5c>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x5c>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_MspInit+0x5c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_MspInit+0x5c>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_MspInit+0x60>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_MspInit+0x60>)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <BusFault_Handler+0x4>

08000e56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <UsageFault_Handler+0x4>

08000e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 fa10 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e90:	2020      	movs	r0, #32
 8000e92:	f000 fcc7 	bl	8001824 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e96:	2040      	movs	r0, #64	; 0x40
 8000e98:	f000 fcc4 	bl	8001824 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e9c:	2080      	movs	r0, #128	; 0x80
 8000e9e:	f000 fcc1 	bl	8001824 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ea2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ea6:	f000 fcbd 	bl	8001824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <TIM2_IRQHandler+0x10>)
 8000eb6:	f001 fa4b 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000e8 	.word	0x200000e8

08000ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ec8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ecc:	f000 fcaa 	bl	8001824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f001 ffe2 	bl	8002ecc <__errno>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20005000 	.word	0x20005000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20000090 	.word	0x20000090
 8000f3c:	20000138 	.word	0x20000138

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000f92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa4:	4823      	ldr	r0, [pc, #140]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000fa6:	f001 f83f 	bl	8002028 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000fb0:	f7ff ff0a 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481c      	ldr	r0, [pc, #112]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000fc2:	f001 fb8b 	bl	80026dc <HAL_TIM_ConfigClockSource>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000fcc:	f7ff fefc 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fd0:	4818      	ldr	r0, [pc, #96]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000fd2:	f001 f8c3 	bl	800215c <HAL_TIM_PWM_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fdc:	f7ff fef4 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4619      	mov	r1, r3
 8000fee:	4811      	ldr	r0, [pc, #68]	; (8001034 <MX_TIM2_Init+0xe8>)
 8000ff0:	f001 fefc 	bl	8002dec <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ffa:	f7ff fee5 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	2360      	movs	r3, #96	; 0x60
 8001000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM2_Init+0xe8>)
 8001016:	f001 faa3 	bl	8002560 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001020:	f7ff fed2 	bl	8000dc8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM2_Init+0xe8>)
 8001026:	f000 f88d 	bl	8001144 <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3738      	adds	r7, #56	; 0x38
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000e8 	.word	0x200000e8

08001038 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_TIM3_Init+0x94>)
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <MX_TIM3_Init+0x98>)
 8001058:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_TIM3_Init+0x94>)
 800105c:	2247      	movs	r2, #71	; 0x47
 800105e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_TIM3_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_TIM3_Init+0x94>)
 8001068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_TIM3_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_TIM3_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <MX_TIM3_Init+0x94>)
 800107c:	f000 ffd4 	bl	8002028 <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001086:	f7ff fe9f 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_TIM3_Init+0x94>)
 8001098:	f001 fb20 	bl	80026dc <HAL_TIM_ConfigClockSource>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f7ff fe91 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_TIM3_Init+0x94>)
 80010b4:	f001 fe9a 	bl	8002dec <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010be:	f7ff fe83 	bl	8000dc8 <Error_Handler>
  }

}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000a0 	.word	0x200000a0
 80010d0:	40000400 	.word	0x40000400

080010d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d114      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_TIM_Base_MspInit+0x68>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <HAL_TIM_Base_MspInit+0x68>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_TIM_Base_MspInit+0x68>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	201c      	movs	r0, #28
 8001104:	f000 f9e5 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001108:	201c      	movs	r0, #28
 800110a:	f000 f9fe 	bl	800150a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800110e:	e010      	b.n	8001132 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_TIM_Base_MspInit+0x6c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10b      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_TIM_Base_MspInit+0x68>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_TIM_Base_MspInit+0x68>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_TIM_Base_MspInit+0x68>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40000400 	.word	0x40000400

08001144 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001162:	d12a      	bne.n	80011ba <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_TIM_MspPostInit+0x80>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_TIM_MspPostInit+0x80>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_TIM_MspPostInit+0x80>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800117c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001180:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <HAL_TIM_MspPostInit+0x84>)
 8001192:	f000 f9d5 	bl	8001540 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_TIM_MspPostInit+0x88>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_TIM_MspPostInit+0x88>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010000 	.word	0x40010000

080011d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011d2:	e003      	b.n	80011dc <LoopCopyDataInit>

080011d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011da:	3104      	adds	r1, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011e4:	d3f6      	bcc.n	80011d4 <CopyDataInit>
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011e8:	e002      	b.n	80011f0 <LoopFillZerobss>

080011ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011ec:	f842 3b04 	str.w	r3, [r2], #4

080011f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011f4:	d3f9      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011f6:	f7ff fea3 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 fe6d 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff fbdb 	bl	80009b8 <main>
  bx lr
 8001202:	4770      	bx	lr
  ldr r3, =_sidata
 8001204:	08003800 	.word	0x08003800
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800120c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001210:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001214:	20000138 	.word	0x20000138

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x28>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f945 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fdcc 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f95d 	bl	8001526 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f925 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	20000130 	.word	0x20000130

080012cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000130 	.word	0x20000130

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fff0 	bl	80012cc <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_Delay+0x40>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffe0 	bl	80012cc <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000000c 	.word	0x2000000c

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <__NVIC_EnableIRQ+0x34>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff90 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff2d 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff42 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff35 	bl	8001388 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e127      	b.n	80017a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001554:	2201      	movs	r2, #1
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8116 	bne.w	800179e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d034      	beq.n	80015e4 <HAL_GPIO_Init+0xa4>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d80d      	bhi.n	800159a <HAL_GPIO_Init+0x5a>
 800157e:	2b02      	cmp	r3, #2
 8001580:	d02b      	beq.n	80015da <HAL_GPIO_Init+0x9a>
 8001582:	2b02      	cmp	r3, #2
 8001584:	d804      	bhi.n	8001590 <HAL_GPIO_Init+0x50>
 8001586:	2b00      	cmp	r3, #0
 8001588:	d031      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 800158a:	2b01      	cmp	r3, #1
 800158c:	d01c      	beq.n	80015c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e048      	b.n	8001622 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001590:	2b03      	cmp	r3, #3
 8001592:	d043      	beq.n	800161c <HAL_GPIO_Init+0xdc>
 8001594:	2b11      	cmp	r3, #17
 8001596:	d01b      	beq.n	80015d0 <HAL_GPIO_Init+0x90>
          break;
 8001598:	e043      	b.n	8001622 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800159a:	4a89      	ldr	r2, [pc, #548]	; (80017c0 <HAL_GPIO_Init+0x280>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d026      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015a0:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <HAL_GPIO_Init+0x280>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d806      	bhi.n	80015b4 <HAL_GPIO_Init+0x74>
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_GPIO_Init+0x284>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d020      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015ac:	4a86      	ldr	r2, [pc, #536]	; (80017c8 <HAL_GPIO_Init+0x288>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01d      	beq.n	80015ee <HAL_GPIO_Init+0xae>
          break;
 80015b2:	e036      	b.n	8001622 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015b4:	4a85      	ldr	r2, [pc, #532]	; (80017cc <HAL_GPIO_Init+0x28c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015ba:	4a85      	ldr	r2, [pc, #532]	; (80017d0 <HAL_GPIO_Init+0x290>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d016      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015c0:	4a84      	ldr	r2, [pc, #528]	; (80017d4 <HAL_GPIO_Init+0x294>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0xae>
          break;
 80015c6:	e02c      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e028      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e023      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e01e      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	330c      	adds	r3, #12
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e019      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e012      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	611a      	str	r2, [r3, #16]
          break;
 800160e:	e008      	b.n	8001622 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001610:	2308      	movs	r3, #8
 8001612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	615a      	str	r2, [r3, #20]
          break;
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d801      	bhi.n	800162c <HAL_GPIO_Init+0xec>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e001      	b.n	8001630 <HAL_GPIO_Init+0xf0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d802      	bhi.n	800163e <HAL_GPIO_Init+0xfe>
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x104>
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3b08      	subs	r3, #8
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	210f      	movs	r1, #15
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	401a      	ands	r2, r3
 8001656:	6a39      	ldr	r1, [r7, #32]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8096 	beq.w	800179e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001672:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_GPIO_Init+0x298>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_GPIO_Init+0x298>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_GPIO_Init+0x298>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800168a:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_GPIO_Init+0x29c>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x19e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <HAL_GPIO_Init+0x2a4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x19a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x196>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x2ac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x192>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016de:	2300      	movs	r3, #0
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f0:	493a      	ldr	r1, [pc, #232]	; (80017dc <HAL_GPIO_Init+0x29c>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4938      	ldr	r1, [pc, #224]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	43db      	mvns	r3, r3
 8001720:	4933      	ldr	r1, [pc, #204]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001722:	4013      	ands	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	492e      	ldr	r1, [pc, #184]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4929      	ldr	r1, [pc, #164]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800174a:	4013      	ands	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	4924      	ldr	r1, [pc, #144]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	43db      	mvns	r3, r3
 8001770:	491f      	ldr	r1, [pc, #124]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001772:	4013      	ands	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	491a      	ldr	r1, [pc, #104]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	60cb      	str	r3, [r1, #12]
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	43db      	mvns	r3, r3
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800179a:	4013      	ands	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f aed0 	bne.w	8001554 <HAL_GPIO_Init+0x14>
  }
}
 80017b4:	bf00      	nop
 80017b6:	372c      	adds	r7, #44	; 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10110000 	.word	0x10110000
 80017c8:	10120000 	.word	0x10120000
 80017cc:	10310000 	.word	0x10310000
 80017d0:	10320000 	.word	0x10320000
 80017d4:	10220000 	.word	0x10220000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40011400 	.word	0x40011400
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f99e 	bl	8000b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e26c      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8087 	beq.w	8001982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00c      	beq.n	800189a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d112      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
 800188c:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d06c      	beq.n	8001980 <HAL_RCC_OscConfig+0x12c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d168      	bne.n	8001980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e246      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x76>
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e02e      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0xbc>
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 8001910:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fccc 	bl	80012cc <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fcc8 	bl	80012cc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1fa      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xe4>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fcb8 	bl	80012cc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fcb4 	bl	80012cc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1e6      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x10c>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1ba      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4939      	ldr	r1, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fc6d 	bl	80012cc <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc69 	bl	80012cc <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e19b      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc4c 	bl	80012cc <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fc48 	bl	80012cc <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03a      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fc2c 	bl	80012cc <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fc28 	bl	80012cc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e15a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 faa8 	bl	8001fec <RCC_Delay>
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fc12 	bl	80012cc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	e00f      	b.n	8001acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fc0e 	bl	80012cc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d908      	bls.n	8001acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e140      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	42420000 	.word	0x42420000
 8001ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e9      	bne.n	8001aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a6 	beq.w	8001c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b94      	ldr	r3, [pc, #592]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a93      	ldr	r2, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fbcf 	bl	80012cc <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fbcb 	bl	80012cc <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0fd      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a72      	ldr	r2, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x356>
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb7f 	bl	80012cc <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fb7b 	bl	80012cc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0ab      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb69 	bl	80012cc <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fb65 	bl	80012cc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e095      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8081 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d061      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d146      	bne.n	8001cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb39 	bl	80012cc <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fb35 	bl	80012cc <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e067      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a19      	ldr	r1, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb09 	bl	80012cc <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fb05 	bl	80012cc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e037      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
 8001cdc:	e02f      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff faf2 	bl	80012cc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff faee 	bl	80012cc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e020      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x498>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0d0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4965      	ldr	r1, [pc, #404]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b8      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	494d      	ldr	r1, [pc, #308]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d040      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e073      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06b      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4936      	ldr	r1, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fa42 	bl	80012cc <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff fa3e 	bl	80012cc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e053      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d210      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e032      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f000 f821 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1cc>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f9a0 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	080037b4 	.word	0x080037b4
 8001f20:	20000004 	.word	0x20000004
 8001f24:	20000008 	.word	0x20000008

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b490      	push	{r4, r7}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f30:	1d3c      	adds	r4, r7, #4
 8001f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x40>
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x46>
 8001f66:	e02d      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	e02d      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0c5b      	lsrs	r3, r3, #17
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa6:	fb02 f203 	mul.w	r2, r2, r3
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	e004      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	623b      	str	r3, [r7, #32]
      break;
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc6:	623b      	str	r3, [r7, #32]
      break;
 8001fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc90      	pop	{r4, r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	080037a0 	.word	0x080037a0
 8001fdc:	080037b0 	.word	0x080037b0
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	007a1200 	.word	0x007a1200
 8001fe8:	003d0900 	.word	0x003d0900

08001fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <RCC_Delay+0x34>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <RCC_Delay+0x38>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a5b      	lsrs	r3, r3, #9
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002008:	bf00      	nop
  }
  while (Delay --);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	60fa      	str	r2, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <RCC_Delay+0x1c>
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000004 	.word	0x20000004
 8002024:	10624dd3 	.word	0x10624dd3

08002028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e041      	b.n	80020be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff f840 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 fc1c 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d001      	beq.n	80020e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_TIM_Base_Start+0x88>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00e      	beq.n	8002110 <HAL_TIM_Base_Start+0x48>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fa:	d009      	beq.n	8002110 <HAL_TIM_Base_Start+0x48>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <HAL_TIM_Base_Start+0x8c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_Base_Start+0x48>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_TIM_Base_Start+0x90>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d111      	bne.n	8002134 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d010      	beq.n	8002144 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	e007      	b.n	8002144 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800

0800215c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e041      	b.n	80021f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f839 	bl	80021fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 fb82 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_TIM_PWM_Start+0x24>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e022      	b.n	8002276 <HAL_TIM_PWM_Start+0x6a>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d109      	bne.n	800224a <HAL_TIM_PWM_Start+0x3e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e015      	b.n	8002276 <HAL_TIM_PWM_Start+0x6a>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d109      	bne.n	8002264 <HAL_TIM_PWM_Start+0x58>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e008      	b.n	8002276 <HAL_TIM_PWM_Start+0x6a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e05e      	b.n	800233c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d104      	bne.n	800228e <HAL_TIM_PWM_Start+0x82>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800228c:	e013      	b.n	80022b6 <HAL_TIM_PWM_Start+0xaa>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d104      	bne.n	800229e <HAL_TIM_PWM_Start+0x92>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800229c:	e00b      	b.n	80022b6 <HAL_TIM_PWM_Start+0xaa>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_PWM_Start+0xa2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ac:	e003      	b.n	80022b6 <HAL_TIM_PWM_Start+0xaa>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fd70 	bl	8002da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_TIM_PWM_Start+0x138>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d107      	bne.n	80022de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_TIM_PWM_Start+0x138>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00e      	beq.n	8002306 <HAL_TIM_PWM_Start+0xfa>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d009      	beq.n	8002306 <HAL_TIM_PWM_Start+0xfa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_TIM_PWM_Start+0x13c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_TIM_PWM_Start+0xfa>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_TIM_PWM_Start+0x140>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b06      	cmp	r3, #6
 8002316:	d010      	beq.n	800233a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002328:	e007      	b.n	800233a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800

08002350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0202 	mvn.w	r2, #2
 800237c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa6b 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa5e 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa6d 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0204 	mvn.w	r2, #4
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa41 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa34 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fa43 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b08      	cmp	r3, #8
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0208 	mvn.w	r2, #8
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2204      	movs	r2, #4
 800242a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa17 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa0a 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fa19 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b10      	cmp	r3, #16
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b10      	cmp	r3, #16
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0210 	mvn.w	r2, #16
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2208      	movs	r2, #8
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9ed 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f9e0 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f9ef 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0201 	mvn.w	r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f9bb 	bl	800284a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fcdd 	bl	8002eba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f9b3 	bl	8002892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0220 	mvn.w	r2, #32
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fca8 	bl	8002ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002576:	2302      	movs	r3, #2
 8002578:	e0ac      	b.n	80026d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b0c      	cmp	r3, #12
 8002586:	f200 809f 	bhi.w	80026c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025c5 	.word	0x080025c5
 8002594:	080026c9 	.word	0x080026c9
 8002598:	080026c9 	.word	0x080026c9
 800259c:	080026c9 	.word	0x080026c9
 80025a0:	08002605 	.word	0x08002605
 80025a4:	080026c9 	.word	0x080026c9
 80025a8:	080026c9 	.word	0x080026c9
 80025ac:	080026c9 	.word	0x080026c9
 80025b0:	08002647 	.word	0x08002647
 80025b4:	080026c9 	.word	0x080026c9
 80025b8:	080026c9 	.word	0x080026c9
 80025bc:	080026c9 	.word	0x080026c9
 80025c0:	08002687 	.word	0x08002687
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f9cc 	bl	8002968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6999      	ldr	r1, [r3, #24]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	619a      	str	r2, [r3, #24]
      break;
 8002602:	e062      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fa12 	bl	8002a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6999      	ldr	r1, [r3, #24]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	021a      	lsls	r2, r3, #8
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	619a      	str	r2, [r3, #24]
      break;
 8002644:	e041      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fa5b 	bl	8002b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0208 	orr.w	r2, r2, #8
 8002660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0204 	bic.w	r2, r2, #4
 8002670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69d9      	ldr	r1, [r3, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	61da      	str	r2, [r3, #28]
      break;
 8002684:	e021      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 faa5 	bl	8002bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69d9      	ldr	r1, [r3, #28]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	61da      	str	r2, [r3, #28]
      break;
 80026c6:	e000      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80026c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_ConfigClockSource+0x18>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0a6      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x166>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d067      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0x120>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d80b      	bhi.n	8002748 <HAL_TIM_ConfigClockSource+0x6c>
 8002730:	2b10      	cmp	r3, #16
 8002732:	d073      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x140>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d802      	bhi.n	800273e <HAL_TIM_ConfigClockSource+0x62>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06f      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800273c:	e078      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800273e:	2b20      	cmp	r3, #32
 8002740:	d06c      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x140>
 8002742:	2b30      	cmp	r3, #48	; 0x30
 8002744:	d06a      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002746:	e073      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d00d      	beq.n	8002768 <HAL_TIM_ConfigClockSource+0x8c>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d804      	bhi.n	800275a <HAL_TIM_ConfigClockSource+0x7e>
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d033      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0xe0>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d041      	beq.n	80027dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002758:	e06a      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275e:	d066      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x152>
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d017      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002766:	e063      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f000 faf5 	bl	8002d66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800278a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
      break;
 8002794:	e04c      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f000 fade 	bl	8002d66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b8:	609a      	str	r2, [r3, #8]
      break;
 80027ba:	e039      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f000 fa55 	bl	8002c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2150      	movs	r1, #80	; 0x50
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 faac 	bl	8002d32 <TIM_ITRx_SetConfig>
      break;
 80027da:	e029      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f000 fa73 	bl	8002cd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2160      	movs	r1, #96	; 0x60
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fa9c 	bl	8002d32 <TIM_ITRx_SetConfig>
      break;
 80027fa:	e019      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	f000 fa35 	bl	8002c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fa8c 	bl	8002d32 <TIM_ITRx_SetConfig>
      break;
 800281a:	e009      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fa83 	bl	8002d32 <TIM_ITRx_SetConfig>
        break;
 800282c:	e000      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800282e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a29      	ldr	r2, [pc, #164]	; (800295c <TIM_Base_SetConfig+0xb8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x30>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x30>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a26      	ldr	r2, [pc, #152]	; (8002960 <TIM_Base_SetConfig+0xbc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x30>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a25      	ldr	r2, [pc, #148]	; (8002964 <TIM_Base_SetConfig+0xc0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <TIM_Base_SetConfig+0xb8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00b      	beq.n	8002906 <TIM_Base_SetConfig+0x62>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0x62>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <TIM_Base_SetConfig+0xbc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0x62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <TIM_Base_SetConfig+0xc0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <TIM_Base_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0201 	bic.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f023 0302 	bic.w	r3, r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <TIM_OC1_SetConfig+0xc8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10c      	bne.n	80029de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0308 	bic.w	r3, r3, #8
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <TIM_OC1_SetConfig+0xc8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40012c00 	.word	0x40012c00

08002a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f023 0210 	bic.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0320 	bic.w	r3, r3, #32
 8002a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <TIM_OC2_SetConfig+0xd0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10d      	bne.n	8002ab0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <TIM_OC2_SetConfig+0xd0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d113      	bne.n	8002ae0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <TIM_OC3_SetConfig+0xd0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10d      	bne.n	8002b82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <TIM_OC3_SetConfig+0xd0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	621a      	str	r2, [r3, #32]
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00

08002bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	031b      	lsls	r3, r3, #12
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <TIM_OC4_SetConfig+0x98>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d109      	bne.n	8002c50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00

08002c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f023 030a 	bic.w	r3, r3, #10
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f023 0210 	bic.w	r2, r3, #16
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	031b      	lsls	r3, r3, #12
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	621a      	str	r2, [r3, #32]
}
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f043 0307 	orr.w	r3, r3, #7
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	021a      	lsls	r2, r3, #8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e046      	b.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d009      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10c      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800

08002ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <__errno>:
 8002ecc:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <__errno+0x8>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000010 	.word	0x20000010

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	2500      	movs	r5, #0
 8002edc:	4e0c      	ldr	r6, [pc, #48]	; (8002f10 <__libc_init_array+0x38>)
 8002ede:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ee0:	1ba4      	subs	r4, r4, r6
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	42a5      	cmp	r5, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	f000 fc34 	bl	8003754 <_init>
 8002eec:	2500      	movs	r5, #0
 8002eee:	4e0a      	ldr	r6, [pc, #40]	; (8002f18 <__libc_init_array+0x40>)
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	; (8002f1c <__libc_init_array+0x44>)
 8002ef2:	1ba4      	subs	r4, r4, r6
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	42a5      	cmp	r5, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f00:	4798      	blx	r3
 8002f02:	3501      	adds	r5, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0a:	4798      	blx	r3
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	080037f8 	.word	0x080037f8
 8002f14:	080037f8 	.word	0x080037f8
 8002f18:	080037f8 	.word	0x080037f8
 8002f1c:	080037fc 	.word	0x080037fc

08002f20 <memset>:
 8002f20:	4603      	mov	r3, r0
 8002f22:	4402      	add	r2, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <siprintf>:
 8002f30:	b40e      	push	{r1, r2, r3}
 8002f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f36:	b500      	push	{lr}
 8002f38:	b09c      	sub	sp, #112	; 0x70
 8002f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f3c:	9002      	str	r0, [sp, #8]
 8002f3e:	9006      	str	r0, [sp, #24]
 8002f40:	9107      	str	r1, [sp, #28]
 8002f42:	9104      	str	r1, [sp, #16]
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <siprintf+0x38>)
 8002f46:	4909      	ldr	r1, [pc, #36]	; (8002f6c <siprintf+0x3c>)
 8002f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f4c:	9105      	str	r1, [sp, #20]
 8002f4e:	6800      	ldr	r0, [r0, #0]
 8002f50:	a902      	add	r1, sp, #8
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	f000 f866 	bl	8003024 <_svfiprintf_r>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	b01c      	add	sp, #112	; 0x70
 8002f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f64:	b003      	add	sp, #12
 8002f66:	4770      	bx	lr
 8002f68:	20000010 	.word	0x20000010
 8002f6c:	ffff0208 	.word	0xffff0208

08002f70 <__ssputs_r>:
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	688e      	ldr	r6, [r1, #8]
 8002f76:	4682      	mov	sl, r0
 8002f78:	429e      	cmp	r6, r3
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	4690      	mov	r8, r2
 8002f7e:	4699      	mov	r9, r3
 8002f80:	d837      	bhi.n	8002ff2 <__ssputs_r+0x82>
 8002f82:	898a      	ldrh	r2, [r1, #12]
 8002f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f88:	d031      	beq.n	8002fee <__ssputs_r+0x7e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	6825      	ldr	r5, [r4, #0]
 8002f8e:	6909      	ldr	r1, [r1, #16]
 8002f90:	1a6f      	subs	r7, r5, r1
 8002f92:	6965      	ldr	r5, [r4, #20]
 8002f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f98:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f9c:	f109 0301 	add.w	r3, r9, #1
 8002fa0:	443b      	add	r3, r7
 8002fa2:	429d      	cmp	r5, r3
 8002fa4:	bf38      	it	cc
 8002fa6:	461d      	movcc	r5, r3
 8002fa8:	0553      	lsls	r3, r2, #21
 8002faa:	d530      	bpl.n	800300e <__ssputs_r+0x9e>
 8002fac:	4629      	mov	r1, r5
 8002fae:	f000 fb37 	bl	8003620 <_malloc_r>
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	b950      	cbnz	r0, 8002fcc <__ssputs_r+0x5c>
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f8ca 3000 	str.w	r3, [sl]
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fcc:	463a      	mov	r2, r7
 8002fce:	6921      	ldr	r1, [r4, #16]
 8002fd0:	f000 fab6 	bl	8003540 <memcpy>
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	6126      	str	r6, [r4, #16]
 8002fe2:	443e      	add	r6, r7
 8002fe4:	6026      	str	r6, [r4, #0]
 8002fe6:	464e      	mov	r6, r9
 8002fe8:	6165      	str	r5, [r4, #20]
 8002fea:	1bed      	subs	r5, r5, r7
 8002fec:	60a5      	str	r5, [r4, #8]
 8002fee:	454e      	cmp	r6, r9
 8002ff0:	d900      	bls.n	8002ff4 <__ssputs_r+0x84>
 8002ff2:	464e      	mov	r6, r9
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	f000 faac 	bl	8003556 <memmove>
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	2000      	movs	r0, #0
 8003002:	1b9b      	subs	r3, r3, r6
 8003004:	60a3      	str	r3, [r4, #8]
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	441e      	add	r6, r3
 800300a:	6026      	str	r6, [r4, #0]
 800300c:	e7dc      	b.n	8002fc8 <__ssputs_r+0x58>
 800300e:	462a      	mov	r2, r5
 8003010:	f000 fb60 	bl	80036d4 <_realloc_r>
 8003014:	4606      	mov	r6, r0
 8003016:	2800      	cmp	r0, #0
 8003018:	d1e2      	bne.n	8002fe0 <__ssputs_r+0x70>
 800301a:	6921      	ldr	r1, [r4, #16]
 800301c:	4650      	mov	r0, sl
 800301e:	f000 fab3 	bl	8003588 <_free_r>
 8003022:	e7c8      	b.n	8002fb6 <__ssputs_r+0x46>

08003024 <_svfiprintf_r>:
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	461d      	mov	r5, r3
 800302a:	898b      	ldrh	r3, [r1, #12]
 800302c:	b09d      	sub	sp, #116	; 0x74
 800302e:	061f      	lsls	r7, r3, #24
 8003030:	4680      	mov	r8, r0
 8003032:	460c      	mov	r4, r1
 8003034:	4616      	mov	r6, r2
 8003036:	d50f      	bpl.n	8003058 <_svfiprintf_r+0x34>
 8003038:	690b      	ldr	r3, [r1, #16]
 800303a:	b96b      	cbnz	r3, 8003058 <_svfiprintf_r+0x34>
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	f000 faef 	bl	8003620 <_malloc_r>
 8003042:	6020      	str	r0, [r4, #0]
 8003044:	6120      	str	r0, [r4, #16]
 8003046:	b928      	cbnz	r0, 8003054 <_svfiprintf_r+0x30>
 8003048:	230c      	movs	r3, #12
 800304a:	f8c8 3000 	str.w	r3, [r8]
 800304e:	f04f 30ff 	mov.w	r0, #4294967295
 8003052:	e0c8      	b.n	80031e6 <_svfiprintf_r+0x1c2>
 8003054:	2340      	movs	r3, #64	; 0x40
 8003056:	6163      	str	r3, [r4, #20]
 8003058:	2300      	movs	r3, #0
 800305a:	9309      	str	r3, [sp, #36]	; 0x24
 800305c:	2320      	movs	r3, #32
 800305e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003062:	2330      	movs	r3, #48	; 0x30
 8003064:	f04f 0b01 	mov.w	fp, #1
 8003068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800306c:	9503      	str	r5, [sp, #12]
 800306e:	4637      	mov	r7, r6
 8003070:	463d      	mov	r5, r7
 8003072:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003076:	b10b      	cbz	r3, 800307c <_svfiprintf_r+0x58>
 8003078:	2b25      	cmp	r3, #37	; 0x25
 800307a:	d13e      	bne.n	80030fa <_svfiprintf_r+0xd6>
 800307c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003080:	d00b      	beq.n	800309a <_svfiprintf_r+0x76>
 8003082:	4653      	mov	r3, sl
 8003084:	4632      	mov	r2, r6
 8003086:	4621      	mov	r1, r4
 8003088:	4640      	mov	r0, r8
 800308a:	f7ff ff71 	bl	8002f70 <__ssputs_r>
 800308e:	3001      	adds	r0, #1
 8003090:	f000 80a4 	beq.w	80031dc <_svfiprintf_r+0x1b8>
 8003094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003096:	4453      	add	r3, sl
 8003098:	9309      	str	r3, [sp, #36]	; 0x24
 800309a:	783b      	ldrb	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 809d 	beq.w	80031dc <_svfiprintf_r+0x1b8>
 80030a2:	2300      	movs	r3, #0
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ac:	9304      	str	r3, [sp, #16]
 80030ae:	9307      	str	r3, [sp, #28]
 80030b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030b4:	931a      	str	r3, [sp, #104]	; 0x68
 80030b6:	462f      	mov	r7, r5
 80030b8:	2205      	movs	r2, #5
 80030ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80030be:	4850      	ldr	r0, [pc, #320]	; (8003200 <_svfiprintf_r+0x1dc>)
 80030c0:	f000 fa30 	bl	8003524 <memchr>
 80030c4:	9b04      	ldr	r3, [sp, #16]
 80030c6:	b9d0      	cbnz	r0, 80030fe <_svfiprintf_r+0xda>
 80030c8:	06d9      	lsls	r1, r3, #27
 80030ca:	bf44      	itt	mi
 80030cc:	2220      	movmi	r2, #32
 80030ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030d2:	071a      	lsls	r2, r3, #28
 80030d4:	bf44      	itt	mi
 80030d6:	222b      	movmi	r2, #43	; 0x2b
 80030d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030dc:	782a      	ldrb	r2, [r5, #0]
 80030de:	2a2a      	cmp	r2, #42	; 0x2a
 80030e0:	d015      	beq.n	800310e <_svfiprintf_r+0xea>
 80030e2:	462f      	mov	r7, r5
 80030e4:	2000      	movs	r0, #0
 80030e6:	250a      	movs	r5, #10
 80030e8:	9a07      	ldr	r2, [sp, #28]
 80030ea:	4639      	mov	r1, r7
 80030ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030f0:	3b30      	subs	r3, #48	; 0x30
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	d94d      	bls.n	8003192 <_svfiprintf_r+0x16e>
 80030f6:	b1b8      	cbz	r0, 8003128 <_svfiprintf_r+0x104>
 80030f8:	e00f      	b.n	800311a <_svfiprintf_r+0xf6>
 80030fa:	462f      	mov	r7, r5
 80030fc:	e7b8      	b.n	8003070 <_svfiprintf_r+0x4c>
 80030fe:	4a40      	ldr	r2, [pc, #256]	; (8003200 <_svfiprintf_r+0x1dc>)
 8003100:	463d      	mov	r5, r7
 8003102:	1a80      	subs	r0, r0, r2
 8003104:	fa0b f000 	lsl.w	r0, fp, r0
 8003108:	4318      	orrs	r0, r3
 800310a:	9004      	str	r0, [sp, #16]
 800310c:	e7d3      	b.n	80030b6 <_svfiprintf_r+0x92>
 800310e:	9a03      	ldr	r2, [sp, #12]
 8003110:	1d11      	adds	r1, r2, #4
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	9103      	str	r1, [sp, #12]
 8003116:	2a00      	cmp	r2, #0
 8003118:	db01      	blt.n	800311e <_svfiprintf_r+0xfa>
 800311a:	9207      	str	r2, [sp, #28]
 800311c:	e004      	b.n	8003128 <_svfiprintf_r+0x104>
 800311e:	4252      	negs	r2, r2
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	9207      	str	r2, [sp, #28]
 8003126:	9304      	str	r3, [sp, #16]
 8003128:	783b      	ldrb	r3, [r7, #0]
 800312a:	2b2e      	cmp	r3, #46	; 0x2e
 800312c:	d10c      	bne.n	8003148 <_svfiprintf_r+0x124>
 800312e:	787b      	ldrb	r3, [r7, #1]
 8003130:	2b2a      	cmp	r3, #42	; 0x2a
 8003132:	d133      	bne.n	800319c <_svfiprintf_r+0x178>
 8003134:	9b03      	ldr	r3, [sp, #12]
 8003136:	3702      	adds	r7, #2
 8003138:	1d1a      	adds	r2, r3, #4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	9203      	str	r2, [sp, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	bfb8      	it	lt
 8003142:	f04f 33ff 	movlt.w	r3, #4294967295
 8003146:	9305      	str	r3, [sp, #20]
 8003148:	4d2e      	ldr	r5, [pc, #184]	; (8003204 <_svfiprintf_r+0x1e0>)
 800314a:	2203      	movs	r2, #3
 800314c:	7839      	ldrb	r1, [r7, #0]
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f9e8 	bl	8003524 <memchr>
 8003154:	b138      	cbz	r0, 8003166 <_svfiprintf_r+0x142>
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	1b40      	subs	r0, r0, r5
 800315a:	fa03 f000 	lsl.w	r0, r3, r0
 800315e:	9b04      	ldr	r3, [sp, #16]
 8003160:	3701      	adds	r7, #1
 8003162:	4303      	orrs	r3, r0
 8003164:	9304      	str	r3, [sp, #16]
 8003166:	7839      	ldrb	r1, [r7, #0]
 8003168:	2206      	movs	r2, #6
 800316a:	4827      	ldr	r0, [pc, #156]	; (8003208 <_svfiprintf_r+0x1e4>)
 800316c:	1c7e      	adds	r6, r7, #1
 800316e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003172:	f000 f9d7 	bl	8003524 <memchr>
 8003176:	2800      	cmp	r0, #0
 8003178:	d038      	beq.n	80031ec <_svfiprintf_r+0x1c8>
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <_svfiprintf_r+0x1e8>)
 800317c:	bb13      	cbnz	r3, 80031c4 <_svfiprintf_r+0x1a0>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	3307      	adds	r3, #7
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	3308      	adds	r3, #8
 8003188:	9303      	str	r3, [sp, #12]
 800318a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318c:	444b      	add	r3, r9
 800318e:	9309      	str	r3, [sp, #36]	; 0x24
 8003190:	e76d      	b.n	800306e <_svfiprintf_r+0x4a>
 8003192:	fb05 3202 	mla	r2, r5, r2, r3
 8003196:	2001      	movs	r0, #1
 8003198:	460f      	mov	r7, r1
 800319a:	e7a6      	b.n	80030ea <_svfiprintf_r+0xc6>
 800319c:	2300      	movs	r3, #0
 800319e:	250a      	movs	r5, #10
 80031a0:	4619      	mov	r1, r3
 80031a2:	3701      	adds	r7, #1
 80031a4:	9305      	str	r3, [sp, #20]
 80031a6:	4638      	mov	r0, r7
 80031a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031ac:	3a30      	subs	r2, #48	; 0x30
 80031ae:	2a09      	cmp	r2, #9
 80031b0:	d903      	bls.n	80031ba <_svfiprintf_r+0x196>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0c8      	beq.n	8003148 <_svfiprintf_r+0x124>
 80031b6:	9105      	str	r1, [sp, #20]
 80031b8:	e7c6      	b.n	8003148 <_svfiprintf_r+0x124>
 80031ba:	fb05 2101 	mla	r1, r5, r1, r2
 80031be:	2301      	movs	r3, #1
 80031c0:	4607      	mov	r7, r0
 80031c2:	e7f0      	b.n	80031a6 <_svfiprintf_r+0x182>
 80031c4:	ab03      	add	r3, sp, #12
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	4622      	mov	r2, r4
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <_svfiprintf_r+0x1ec>)
 80031cc:	a904      	add	r1, sp, #16
 80031ce:	4640      	mov	r0, r8
 80031d0:	f3af 8000 	nop.w
 80031d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031d8:	4681      	mov	r9, r0
 80031da:	d1d6      	bne.n	800318a <_svfiprintf_r+0x166>
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	065b      	lsls	r3, r3, #25
 80031e0:	f53f af35 	bmi.w	800304e <_svfiprintf_r+0x2a>
 80031e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031e6:	b01d      	add	sp, #116	; 0x74
 80031e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ec:	ab03      	add	r3, sp, #12
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4622      	mov	r2, r4
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <_svfiprintf_r+0x1ec>)
 80031f4:	a904      	add	r1, sp, #16
 80031f6:	4640      	mov	r0, r8
 80031f8:	f000 f882 	bl	8003300 <_printf_i>
 80031fc:	e7ea      	b.n	80031d4 <_svfiprintf_r+0x1b0>
 80031fe:	bf00      	nop
 8003200:	080037c4 	.word	0x080037c4
 8003204:	080037ca 	.word	0x080037ca
 8003208:	080037ce 	.word	0x080037ce
 800320c:	00000000 	.word	0x00000000
 8003210:	08002f71 	.word	0x08002f71

08003214 <_printf_common>:
 8003214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003218:	4691      	mov	r9, r2
 800321a:	461f      	mov	r7, r3
 800321c:	688a      	ldr	r2, [r1, #8]
 800321e:	690b      	ldr	r3, [r1, #16]
 8003220:	4606      	mov	r6, r0
 8003222:	4293      	cmp	r3, r2
 8003224:	bfb8      	it	lt
 8003226:	4613      	movlt	r3, r2
 8003228:	f8c9 3000 	str.w	r3, [r9]
 800322c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003230:	460c      	mov	r4, r1
 8003232:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003236:	b112      	cbz	r2, 800323e <_printf_common+0x2a>
 8003238:	3301      	adds	r3, #1
 800323a:	f8c9 3000 	str.w	r3, [r9]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	0699      	lsls	r1, r3, #26
 8003242:	bf42      	ittt	mi
 8003244:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003248:	3302      	addmi	r3, #2
 800324a:	f8c9 3000 	strmi.w	r3, [r9]
 800324e:	6825      	ldr	r5, [r4, #0]
 8003250:	f015 0506 	ands.w	r5, r5, #6
 8003254:	d107      	bne.n	8003266 <_printf_common+0x52>
 8003256:	f104 0a19 	add.w	sl, r4, #25
 800325a:	68e3      	ldr	r3, [r4, #12]
 800325c:	f8d9 2000 	ldr.w	r2, [r9]
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	42ab      	cmp	r3, r5
 8003264:	dc29      	bgt.n	80032ba <_printf_common+0xa6>
 8003266:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	3300      	adds	r3, #0
 800326e:	bf18      	it	ne
 8003270:	2301      	movne	r3, #1
 8003272:	0692      	lsls	r2, r2, #26
 8003274:	d42e      	bmi.n	80032d4 <_printf_common+0xc0>
 8003276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800327a:	4639      	mov	r1, r7
 800327c:	4630      	mov	r0, r6
 800327e:	47c0      	blx	r8
 8003280:	3001      	adds	r0, #1
 8003282:	d021      	beq.n	80032c8 <_printf_common+0xb4>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	68e5      	ldr	r5, [r4, #12]
 8003288:	f003 0306 	and.w	r3, r3, #6
 800328c:	2b04      	cmp	r3, #4
 800328e:	bf18      	it	ne
 8003290:	2500      	movne	r5, #0
 8003292:	f8d9 2000 	ldr.w	r2, [r9]
 8003296:	f04f 0900 	mov.w	r9, #0
 800329a:	bf08      	it	eq
 800329c:	1aad      	subeq	r5, r5, r2
 800329e:	68a3      	ldr	r3, [r4, #8]
 80032a0:	6922      	ldr	r2, [r4, #16]
 80032a2:	bf08      	it	eq
 80032a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bfc4      	itt	gt
 80032ac:	1a9b      	subgt	r3, r3, r2
 80032ae:	18ed      	addgt	r5, r5, r3
 80032b0:	341a      	adds	r4, #26
 80032b2:	454d      	cmp	r5, r9
 80032b4:	d11a      	bne.n	80032ec <_printf_common+0xd8>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e008      	b.n	80032cc <_printf_common+0xb8>
 80032ba:	2301      	movs	r3, #1
 80032bc:	4652      	mov	r2, sl
 80032be:	4639      	mov	r1, r7
 80032c0:	4630      	mov	r0, r6
 80032c2:	47c0      	blx	r8
 80032c4:	3001      	adds	r0, #1
 80032c6:	d103      	bne.n	80032d0 <_printf_common+0xbc>
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	3501      	adds	r5, #1
 80032d2:	e7c2      	b.n	800325a <_printf_common+0x46>
 80032d4:	2030      	movs	r0, #48	; 0x30
 80032d6:	18e1      	adds	r1, r4, r3
 80032d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032e2:	4422      	add	r2, r4
 80032e4:	3302      	adds	r3, #2
 80032e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032ea:	e7c4      	b.n	8003276 <_printf_common+0x62>
 80032ec:	2301      	movs	r3, #1
 80032ee:	4622      	mov	r2, r4
 80032f0:	4639      	mov	r1, r7
 80032f2:	4630      	mov	r0, r6
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d0e6      	beq.n	80032c8 <_printf_common+0xb4>
 80032fa:	f109 0901 	add.w	r9, r9, #1
 80032fe:	e7d8      	b.n	80032b2 <_printf_common+0x9e>

08003300 <_printf_i>:
 8003300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003304:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003308:	460c      	mov	r4, r1
 800330a:	7e09      	ldrb	r1, [r1, #24]
 800330c:	b085      	sub	sp, #20
 800330e:	296e      	cmp	r1, #110	; 0x6e
 8003310:	4617      	mov	r7, r2
 8003312:	4606      	mov	r6, r0
 8003314:	4698      	mov	r8, r3
 8003316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003318:	f000 80b3 	beq.w	8003482 <_printf_i+0x182>
 800331c:	d822      	bhi.n	8003364 <_printf_i+0x64>
 800331e:	2963      	cmp	r1, #99	; 0x63
 8003320:	d036      	beq.n	8003390 <_printf_i+0x90>
 8003322:	d80a      	bhi.n	800333a <_printf_i+0x3a>
 8003324:	2900      	cmp	r1, #0
 8003326:	f000 80b9 	beq.w	800349c <_printf_i+0x19c>
 800332a:	2958      	cmp	r1, #88	; 0x58
 800332c:	f000 8083 	beq.w	8003436 <_printf_i+0x136>
 8003330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003334:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003338:	e032      	b.n	80033a0 <_printf_i+0xa0>
 800333a:	2964      	cmp	r1, #100	; 0x64
 800333c:	d001      	beq.n	8003342 <_printf_i+0x42>
 800333e:	2969      	cmp	r1, #105	; 0x69
 8003340:	d1f6      	bne.n	8003330 <_printf_i+0x30>
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	6813      	ldr	r3, [r2, #0]
 8003346:	0605      	lsls	r5, r0, #24
 8003348:	f103 0104 	add.w	r1, r3, #4
 800334c:	d52a      	bpl.n	80033a4 <_printf_i+0xa4>
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6011      	str	r1, [r2, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	da03      	bge.n	800335e <_printf_i+0x5e>
 8003356:	222d      	movs	r2, #45	; 0x2d
 8003358:	425b      	negs	r3, r3
 800335a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800335e:	486f      	ldr	r0, [pc, #444]	; (800351c <_printf_i+0x21c>)
 8003360:	220a      	movs	r2, #10
 8003362:	e039      	b.n	80033d8 <_printf_i+0xd8>
 8003364:	2973      	cmp	r1, #115	; 0x73
 8003366:	f000 809d 	beq.w	80034a4 <_printf_i+0x1a4>
 800336a:	d808      	bhi.n	800337e <_printf_i+0x7e>
 800336c:	296f      	cmp	r1, #111	; 0x6f
 800336e:	d020      	beq.n	80033b2 <_printf_i+0xb2>
 8003370:	2970      	cmp	r1, #112	; 0x70
 8003372:	d1dd      	bne.n	8003330 <_printf_i+0x30>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f043 0320 	orr.w	r3, r3, #32
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	e003      	b.n	8003386 <_printf_i+0x86>
 800337e:	2975      	cmp	r1, #117	; 0x75
 8003380:	d017      	beq.n	80033b2 <_printf_i+0xb2>
 8003382:	2978      	cmp	r1, #120	; 0x78
 8003384:	d1d4      	bne.n	8003330 <_printf_i+0x30>
 8003386:	2378      	movs	r3, #120	; 0x78
 8003388:	4865      	ldr	r0, [pc, #404]	; (8003520 <_printf_i+0x220>)
 800338a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800338e:	e055      	b.n	800343c <_printf_i+0x13c>
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003396:	1d19      	adds	r1, r3, #4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6011      	str	r1, [r2, #0]
 800339c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033a0:	2301      	movs	r3, #1
 80033a2:	e08c      	b.n	80034be <_printf_i+0x1be>
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033aa:	6011      	str	r1, [r2, #0]
 80033ac:	bf18      	it	ne
 80033ae:	b21b      	sxthne	r3, r3
 80033b0:	e7cf      	b.n	8003352 <_printf_i+0x52>
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	6825      	ldr	r5, [r4, #0]
 80033b6:	1d18      	adds	r0, r3, #4
 80033b8:	6010      	str	r0, [r2, #0]
 80033ba:	0628      	lsls	r0, r5, #24
 80033bc:	d501      	bpl.n	80033c2 <_printf_i+0xc2>
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	e002      	b.n	80033c8 <_printf_i+0xc8>
 80033c2:	0668      	lsls	r0, r5, #25
 80033c4:	d5fb      	bpl.n	80033be <_printf_i+0xbe>
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	296f      	cmp	r1, #111	; 0x6f
 80033ca:	bf14      	ite	ne
 80033cc:	220a      	movne	r2, #10
 80033ce:	2208      	moveq	r2, #8
 80033d0:	4852      	ldr	r0, [pc, #328]	; (800351c <_printf_i+0x21c>)
 80033d2:	2100      	movs	r1, #0
 80033d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033d8:	6865      	ldr	r5, [r4, #4]
 80033da:	2d00      	cmp	r5, #0
 80033dc:	60a5      	str	r5, [r4, #8]
 80033de:	f2c0 8095 	blt.w	800350c <_printf_i+0x20c>
 80033e2:	6821      	ldr	r1, [r4, #0]
 80033e4:	f021 0104 	bic.w	r1, r1, #4
 80033e8:	6021      	str	r1, [r4, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d13d      	bne.n	800346a <_printf_i+0x16a>
 80033ee:	2d00      	cmp	r5, #0
 80033f0:	f040 808e 	bne.w	8003510 <_printf_i+0x210>
 80033f4:	4665      	mov	r5, ip
 80033f6:	2a08      	cmp	r2, #8
 80033f8:	d10b      	bne.n	8003412 <_printf_i+0x112>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	07db      	lsls	r3, r3, #31
 80033fe:	d508      	bpl.n	8003412 <_printf_i+0x112>
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	6862      	ldr	r2, [r4, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	bfde      	ittt	le
 8003408:	2330      	movle	r3, #48	; 0x30
 800340a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800340e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003412:	ebac 0305 	sub.w	r3, ip, r5
 8003416:	6123      	str	r3, [r4, #16]
 8003418:	f8cd 8000 	str.w	r8, [sp]
 800341c:	463b      	mov	r3, r7
 800341e:	aa03      	add	r2, sp, #12
 8003420:	4621      	mov	r1, r4
 8003422:	4630      	mov	r0, r6
 8003424:	f7ff fef6 	bl	8003214 <_printf_common>
 8003428:	3001      	adds	r0, #1
 800342a:	d14d      	bne.n	80034c8 <_printf_i+0x1c8>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	b005      	add	sp, #20
 8003432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003436:	4839      	ldr	r0, [pc, #228]	; (800351c <_printf_i+0x21c>)
 8003438:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	6821      	ldr	r1, [r4, #0]
 8003440:	1d1d      	adds	r5, r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6015      	str	r5, [r2, #0]
 8003446:	060a      	lsls	r2, r1, #24
 8003448:	d50b      	bpl.n	8003462 <_printf_i+0x162>
 800344a:	07ca      	lsls	r2, r1, #31
 800344c:	bf44      	itt	mi
 800344e:	f041 0120 	orrmi.w	r1, r1, #32
 8003452:	6021      	strmi	r1, [r4, #0]
 8003454:	b91b      	cbnz	r3, 800345e <_printf_i+0x15e>
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	f022 0220 	bic.w	r2, r2, #32
 800345c:	6022      	str	r2, [r4, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	e7b7      	b.n	80033d2 <_printf_i+0xd2>
 8003462:	064d      	lsls	r5, r1, #25
 8003464:	bf48      	it	mi
 8003466:	b29b      	uxthmi	r3, r3
 8003468:	e7ef      	b.n	800344a <_printf_i+0x14a>
 800346a:	4665      	mov	r5, ip
 800346c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003470:	fb02 3311 	mls	r3, r2, r1, r3
 8003474:	5cc3      	ldrb	r3, [r0, r3]
 8003476:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800347a:	460b      	mov	r3, r1
 800347c:	2900      	cmp	r1, #0
 800347e:	d1f5      	bne.n	800346c <_printf_i+0x16c>
 8003480:	e7b9      	b.n	80033f6 <_printf_i+0xf6>
 8003482:	6813      	ldr	r3, [r2, #0]
 8003484:	6825      	ldr	r5, [r4, #0]
 8003486:	1d18      	adds	r0, r3, #4
 8003488:	6961      	ldr	r1, [r4, #20]
 800348a:	6010      	str	r0, [r2, #0]
 800348c:	0628      	lsls	r0, r5, #24
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	d501      	bpl.n	8003496 <_printf_i+0x196>
 8003492:	6019      	str	r1, [r3, #0]
 8003494:	e002      	b.n	800349c <_printf_i+0x19c>
 8003496:	066a      	lsls	r2, r5, #25
 8003498:	d5fb      	bpl.n	8003492 <_printf_i+0x192>
 800349a:	8019      	strh	r1, [r3, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	4665      	mov	r5, ip
 80034a0:	6123      	str	r3, [r4, #16]
 80034a2:	e7b9      	b.n	8003418 <_printf_i+0x118>
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	1d19      	adds	r1, r3, #4
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	681d      	ldr	r5, [r3, #0]
 80034ac:	6862      	ldr	r2, [r4, #4]
 80034ae:	2100      	movs	r1, #0
 80034b0:	4628      	mov	r0, r5
 80034b2:	f000 f837 	bl	8003524 <memchr>
 80034b6:	b108      	cbz	r0, 80034bc <_printf_i+0x1bc>
 80034b8:	1b40      	subs	r0, r0, r5
 80034ba:	6060      	str	r0, [r4, #4]
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	6123      	str	r3, [r4, #16]
 80034c0:	2300      	movs	r3, #0
 80034c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c6:	e7a7      	b.n	8003418 <_printf_i+0x118>
 80034c8:	6923      	ldr	r3, [r4, #16]
 80034ca:	462a      	mov	r2, r5
 80034cc:	4639      	mov	r1, r7
 80034ce:	4630      	mov	r0, r6
 80034d0:	47c0      	blx	r8
 80034d2:	3001      	adds	r0, #1
 80034d4:	d0aa      	beq.n	800342c <_printf_i+0x12c>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	079b      	lsls	r3, r3, #30
 80034da:	d413      	bmi.n	8003504 <_printf_i+0x204>
 80034dc:	68e0      	ldr	r0, [r4, #12]
 80034de:	9b03      	ldr	r3, [sp, #12]
 80034e0:	4298      	cmp	r0, r3
 80034e2:	bfb8      	it	lt
 80034e4:	4618      	movlt	r0, r3
 80034e6:	e7a3      	b.n	8003430 <_printf_i+0x130>
 80034e8:	2301      	movs	r3, #1
 80034ea:	464a      	mov	r2, r9
 80034ec:	4639      	mov	r1, r7
 80034ee:	4630      	mov	r0, r6
 80034f0:	47c0      	blx	r8
 80034f2:	3001      	adds	r0, #1
 80034f4:	d09a      	beq.n	800342c <_printf_i+0x12c>
 80034f6:	3501      	adds	r5, #1
 80034f8:	68e3      	ldr	r3, [r4, #12]
 80034fa:	9a03      	ldr	r2, [sp, #12]
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	42ab      	cmp	r3, r5
 8003500:	dcf2      	bgt.n	80034e8 <_printf_i+0x1e8>
 8003502:	e7eb      	b.n	80034dc <_printf_i+0x1dc>
 8003504:	2500      	movs	r5, #0
 8003506:	f104 0919 	add.w	r9, r4, #25
 800350a:	e7f5      	b.n	80034f8 <_printf_i+0x1f8>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ac      	bne.n	800346a <_printf_i+0x16a>
 8003510:	7803      	ldrb	r3, [r0, #0]
 8003512:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800351a:	e76c      	b.n	80033f6 <_printf_i+0xf6>
 800351c:	080037d5 	.word	0x080037d5
 8003520:	080037e6 	.word	0x080037e6

08003524 <memchr>:
 8003524:	b510      	push	{r4, lr}
 8003526:	b2c9      	uxtb	r1, r1
 8003528:	4402      	add	r2, r0
 800352a:	4290      	cmp	r0, r2
 800352c:	4603      	mov	r3, r0
 800352e:	d101      	bne.n	8003534 <memchr+0x10>
 8003530:	2300      	movs	r3, #0
 8003532:	e003      	b.n	800353c <memchr+0x18>
 8003534:	781c      	ldrb	r4, [r3, #0]
 8003536:	3001      	adds	r0, #1
 8003538:	428c      	cmp	r4, r1
 800353a:	d1f6      	bne.n	800352a <memchr+0x6>
 800353c:	4618      	mov	r0, r3
 800353e:	bd10      	pop	{r4, pc}

08003540 <memcpy>:
 8003540:	b510      	push	{r4, lr}
 8003542:	1e43      	subs	r3, r0, #1
 8003544:	440a      	add	r2, r1
 8003546:	4291      	cmp	r1, r2
 8003548:	d100      	bne.n	800354c <memcpy+0xc>
 800354a:	bd10      	pop	{r4, pc}
 800354c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003554:	e7f7      	b.n	8003546 <memcpy+0x6>

08003556 <memmove>:
 8003556:	4288      	cmp	r0, r1
 8003558:	b510      	push	{r4, lr}
 800355a:	eb01 0302 	add.w	r3, r1, r2
 800355e:	d807      	bhi.n	8003570 <memmove+0x1a>
 8003560:	1e42      	subs	r2, r0, #1
 8003562:	4299      	cmp	r1, r3
 8003564:	d00a      	beq.n	800357c <memmove+0x26>
 8003566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800356a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800356e:	e7f8      	b.n	8003562 <memmove+0xc>
 8003570:	4283      	cmp	r3, r0
 8003572:	d9f5      	bls.n	8003560 <memmove+0xa>
 8003574:	1881      	adds	r1, r0, r2
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	42d3      	cmn	r3, r2
 800357a:	d100      	bne.n	800357e <memmove+0x28>
 800357c:	bd10      	pop	{r4, pc}
 800357e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003582:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003586:	e7f7      	b.n	8003578 <memmove+0x22>

08003588 <_free_r>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	4605      	mov	r5, r0
 800358c:	2900      	cmp	r1, #0
 800358e:	d043      	beq.n	8003618 <_free_r+0x90>
 8003590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003594:	1f0c      	subs	r4, r1, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	bfb8      	it	lt
 800359a:	18e4      	addlt	r4, r4, r3
 800359c:	f000 f8d0 	bl	8003740 <__malloc_lock>
 80035a0:	4a1e      	ldr	r2, [pc, #120]	; (800361c <_free_r+0x94>)
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	4610      	mov	r0, r2
 80035a6:	b933      	cbnz	r3, 80035b6 <_free_r+0x2e>
 80035a8:	6063      	str	r3, [r4, #4]
 80035aa:	6014      	str	r4, [r2, #0]
 80035ac:	4628      	mov	r0, r5
 80035ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035b2:	f000 b8c6 	b.w	8003742 <__malloc_unlock>
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	d90b      	bls.n	80035d2 <_free_r+0x4a>
 80035ba:	6821      	ldr	r1, [r4, #0]
 80035bc:	1862      	adds	r2, r4, r1
 80035be:	4293      	cmp	r3, r2
 80035c0:	bf01      	itttt	eq
 80035c2:	681a      	ldreq	r2, [r3, #0]
 80035c4:	685b      	ldreq	r3, [r3, #4]
 80035c6:	1852      	addeq	r2, r2, r1
 80035c8:	6022      	streq	r2, [r4, #0]
 80035ca:	6063      	str	r3, [r4, #4]
 80035cc:	6004      	str	r4, [r0, #0]
 80035ce:	e7ed      	b.n	80035ac <_free_r+0x24>
 80035d0:	4613      	mov	r3, r2
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	b10a      	cbz	r2, 80035da <_free_r+0x52>
 80035d6:	42a2      	cmp	r2, r4
 80035d8:	d9fa      	bls.n	80035d0 <_free_r+0x48>
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	1858      	adds	r0, r3, r1
 80035de:	42a0      	cmp	r0, r4
 80035e0:	d10b      	bne.n	80035fa <_free_r+0x72>
 80035e2:	6820      	ldr	r0, [r4, #0]
 80035e4:	4401      	add	r1, r0
 80035e6:	1858      	adds	r0, r3, r1
 80035e8:	4282      	cmp	r2, r0
 80035ea:	6019      	str	r1, [r3, #0]
 80035ec:	d1de      	bne.n	80035ac <_free_r+0x24>
 80035ee:	6810      	ldr	r0, [r2, #0]
 80035f0:	6852      	ldr	r2, [r2, #4]
 80035f2:	4401      	add	r1, r0
 80035f4:	6019      	str	r1, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e7d8      	b.n	80035ac <_free_r+0x24>
 80035fa:	d902      	bls.n	8003602 <_free_r+0x7a>
 80035fc:	230c      	movs	r3, #12
 80035fe:	602b      	str	r3, [r5, #0]
 8003600:	e7d4      	b.n	80035ac <_free_r+0x24>
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	1821      	adds	r1, r4, r0
 8003606:	428a      	cmp	r2, r1
 8003608:	bf01      	itttt	eq
 800360a:	6811      	ldreq	r1, [r2, #0]
 800360c:	6852      	ldreq	r2, [r2, #4]
 800360e:	1809      	addeq	r1, r1, r0
 8003610:	6021      	streq	r1, [r4, #0]
 8003612:	6062      	str	r2, [r4, #4]
 8003614:	605c      	str	r4, [r3, #4]
 8003616:	e7c9      	b.n	80035ac <_free_r+0x24>
 8003618:	bd38      	pop	{r3, r4, r5, pc}
 800361a:	bf00      	nop
 800361c:	20000094 	.word	0x20000094

08003620 <_malloc_r>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	1ccd      	adds	r5, r1, #3
 8003624:	f025 0503 	bic.w	r5, r5, #3
 8003628:	3508      	adds	r5, #8
 800362a:	2d0c      	cmp	r5, #12
 800362c:	bf38      	it	cc
 800362e:	250c      	movcc	r5, #12
 8003630:	2d00      	cmp	r5, #0
 8003632:	4606      	mov	r6, r0
 8003634:	db01      	blt.n	800363a <_malloc_r+0x1a>
 8003636:	42a9      	cmp	r1, r5
 8003638:	d903      	bls.n	8003642 <_malloc_r+0x22>
 800363a:	230c      	movs	r3, #12
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	2000      	movs	r0, #0
 8003640:	bd70      	pop	{r4, r5, r6, pc}
 8003642:	f000 f87d 	bl	8003740 <__malloc_lock>
 8003646:	4a21      	ldr	r2, [pc, #132]	; (80036cc <_malloc_r+0xac>)
 8003648:	6814      	ldr	r4, [r2, #0]
 800364a:	4621      	mov	r1, r4
 800364c:	b991      	cbnz	r1, 8003674 <_malloc_r+0x54>
 800364e:	4c20      	ldr	r4, [pc, #128]	; (80036d0 <_malloc_r+0xb0>)
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	b91b      	cbnz	r3, 800365c <_malloc_r+0x3c>
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f863 	bl	8003720 <_sbrk_r>
 800365a:	6020      	str	r0, [r4, #0]
 800365c:	4629      	mov	r1, r5
 800365e:	4630      	mov	r0, r6
 8003660:	f000 f85e 	bl	8003720 <_sbrk_r>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d124      	bne.n	80036b2 <_malloc_r+0x92>
 8003668:	230c      	movs	r3, #12
 800366a:	4630      	mov	r0, r6
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	f000 f868 	bl	8003742 <__malloc_unlock>
 8003672:	e7e4      	b.n	800363e <_malloc_r+0x1e>
 8003674:	680b      	ldr	r3, [r1, #0]
 8003676:	1b5b      	subs	r3, r3, r5
 8003678:	d418      	bmi.n	80036ac <_malloc_r+0x8c>
 800367a:	2b0b      	cmp	r3, #11
 800367c:	d90f      	bls.n	800369e <_malloc_r+0x7e>
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	18cc      	adds	r4, r1, r3
 8003682:	50cd      	str	r5, [r1, r3]
 8003684:	4630      	mov	r0, r6
 8003686:	f000 f85c 	bl	8003742 <__malloc_unlock>
 800368a:	f104 000b 	add.w	r0, r4, #11
 800368e:	1d23      	adds	r3, r4, #4
 8003690:	f020 0007 	bic.w	r0, r0, #7
 8003694:	1ac3      	subs	r3, r0, r3
 8003696:	d0d3      	beq.n	8003640 <_malloc_r+0x20>
 8003698:	425a      	negs	r2, r3
 800369a:	50e2      	str	r2, [r4, r3]
 800369c:	e7d0      	b.n	8003640 <_malloc_r+0x20>
 800369e:	684b      	ldr	r3, [r1, #4]
 80036a0:	428c      	cmp	r4, r1
 80036a2:	bf16      	itet	ne
 80036a4:	6063      	strne	r3, [r4, #4]
 80036a6:	6013      	streq	r3, [r2, #0]
 80036a8:	460c      	movne	r4, r1
 80036aa:	e7eb      	b.n	8003684 <_malloc_r+0x64>
 80036ac:	460c      	mov	r4, r1
 80036ae:	6849      	ldr	r1, [r1, #4]
 80036b0:	e7cc      	b.n	800364c <_malloc_r+0x2c>
 80036b2:	1cc4      	adds	r4, r0, #3
 80036b4:	f024 0403 	bic.w	r4, r4, #3
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d005      	beq.n	80036c8 <_malloc_r+0xa8>
 80036bc:	1a21      	subs	r1, r4, r0
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 f82e 	bl	8003720 <_sbrk_r>
 80036c4:	3001      	adds	r0, #1
 80036c6:	d0cf      	beq.n	8003668 <_malloc_r+0x48>
 80036c8:	6025      	str	r5, [r4, #0]
 80036ca:	e7db      	b.n	8003684 <_malloc_r+0x64>
 80036cc:	20000094 	.word	0x20000094
 80036d0:	20000098 	.word	0x20000098

080036d4 <_realloc_r>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	4607      	mov	r7, r0
 80036d8:	4614      	mov	r4, r2
 80036da:	460e      	mov	r6, r1
 80036dc:	b921      	cbnz	r1, 80036e8 <_realloc_r+0x14>
 80036de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036e2:	4611      	mov	r1, r2
 80036e4:	f7ff bf9c 	b.w	8003620 <_malloc_r>
 80036e8:	b922      	cbnz	r2, 80036f4 <_realloc_r+0x20>
 80036ea:	f7ff ff4d 	bl	8003588 <_free_r>
 80036ee:	4625      	mov	r5, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	f000 f826 	bl	8003744 <_malloc_usable_size_r>
 80036f8:	42a0      	cmp	r0, r4
 80036fa:	d20f      	bcs.n	800371c <_realloc_r+0x48>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4638      	mov	r0, r7
 8003700:	f7ff ff8e 	bl	8003620 <_malloc_r>
 8003704:	4605      	mov	r5, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	d0f2      	beq.n	80036f0 <_realloc_r+0x1c>
 800370a:	4631      	mov	r1, r6
 800370c:	4622      	mov	r2, r4
 800370e:	f7ff ff17 	bl	8003540 <memcpy>
 8003712:	4631      	mov	r1, r6
 8003714:	4638      	mov	r0, r7
 8003716:	f7ff ff37 	bl	8003588 <_free_r>
 800371a:	e7e9      	b.n	80036f0 <_realloc_r+0x1c>
 800371c:	4635      	mov	r5, r6
 800371e:	e7e7      	b.n	80036f0 <_realloc_r+0x1c>

08003720 <_sbrk_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	2300      	movs	r3, #0
 8003724:	4c05      	ldr	r4, [pc, #20]	; (800373c <_sbrk_r+0x1c>)
 8003726:	4605      	mov	r5, r0
 8003728:	4608      	mov	r0, r1
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	f7fd fbd2 	bl	8000ed4 <_sbrk>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_sbrk_r+0x1a>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	b103      	cbz	r3, 800373a <_sbrk_r+0x1a>
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	20000134 	.word	0x20000134

08003740 <__malloc_lock>:
 8003740:	4770      	bx	lr

08003742 <__malloc_unlock>:
 8003742:	4770      	bx	lr

08003744 <_malloc_usable_size_r>:
 8003744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003748:	1f18      	subs	r0, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfbc      	itt	lt
 800374e:	580b      	ldrlt	r3, [r1, r0]
 8003750:	18c0      	addlt	r0, r0, r3
 8003752:	4770      	bx	lr

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
