
lcd-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003674  08003674  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003674  08003674  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003674  08003674  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000074  080036f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080036f0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d2e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001945  00000000  00000000  00029dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002b710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  0002c118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a34  00000000  00000000  0002ca38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b94  00000000  00000000  0004446c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088239  00000000  00000000  0004d000  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c38  00000000  00000000  000d52b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080035d0 	.word	0x080035d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080035d0 	.word	0x080035d0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <delay>:


extern TIM_HandleTypeDef timer;

void delay (uint16_t delay_param)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <delay+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay_param);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <delay+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <delay+0x14>
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c

08000684 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <send_to_lcd+0x9c>)
 800069c:	f000 ffe8 	bl	8001670 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	2108      	movs	r1, #8
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <send_to_lcd+0xa0>)
 80006b2:	f000 ffdd 	bl	8001670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	2104      	movs	r1, #4
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <send_to_lcd+0xa0>)
 80006c8:	f000 ffd2 	bl	8001670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	085b      	lsrs	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <send_to_lcd+0xa0>)
 80006de:	f000 ffc7 	bl	8001670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <send_to_lcd+0xa0>)
 80006f0:	f000 ffbe 	bl	8001670 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <send_to_lcd+0x9c>)
 80006fc:	f000 ffb8 	bl	8001670 <HAL_GPIO_WritePin>
	delay (20);
 8000700:	2014      	movs	r0, #20
 8000702:	f7ff ffa7 	bl	8000654 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <send_to_lcd+0x9c>)
 800070e:	f000 ffaf 	bl	8001670 <HAL_GPIO_WritePin>
	delay (20);
 8000712:	2014      	movs	r0, #20
 8000714:	f7ff ff9e 	bl	8000654 <delay>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010c00 	.word	0x40010c00
 8000724:	40010800 	.word	0x40010800

08000728 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	091b      	lsrs	r3, r3, #4
 8000736:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffa1 	bl	8000684 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff98 	bl	8000684 <send_to_lcd>
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lcd_send_data>:

void lcd_send_data (char data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff87 	bl	8000684 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff7e 	bl	8000684 <send_to_lcd>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <lcd_clear>:

void lcd_clear (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ffc7 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(2);
 800079a:	2002      	movs	r0, #2
 800079c:	f000 fcde 	bl	800115c <HAL_Delay>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    switch (row)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <lcd_put_cur+0x16>
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d005      	beq.n	80007c4 <lcd_put_cur+0x20>
 80007b8:	e009      	b.n	80007ce <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	603b      	str	r3, [r7, #0]
            break;
 80007c2:	e004      	b.n	80007ce <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007ca:	603b      	str	r3, [r7, #0]
            break;
 80007cc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffa8 	bl	8000728 <lcd_send_cmd>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <lcd_init>:


void lcd_init (void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007e4:	2032      	movs	r0, #50	; 0x32
 80007e6:	f000 fcb9 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x30);
 80007ea:	2030      	movs	r0, #48	; 0x30
 80007ec:	f7ff ff9c 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80007f0:	2005      	movs	r0, #5
 80007f2:	f000 fcb3 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x30);
 80007f6:	2030      	movs	r0, #48	; 0x30
 80007f8:	f7ff ff96 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fcad 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000802:	2030      	movs	r0, #48	; 0x30
 8000804:	f7ff ff90 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(10);
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fca7 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800080e:	2020      	movs	r0, #32
 8000810:	f7ff ff8a 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(10);
 8000814:	200a      	movs	r0, #10
 8000816:	f000 fca1 	bl	800115c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f7ff ff84 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fc9b 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000826:	2008      	movs	r0, #8
 8000828:	f7ff ff7e 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fc95 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ff78 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fc8f 	bl	800115c <HAL_Delay>
	HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fc8c 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000844:	2006      	movs	r0, #6
 8000846:	f7ff ff6f 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 fc86 	bl	800115c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000850:	200c      	movs	r0, #12
 8000852:	f7ff ff69 	bl	8000728 <lcd_send_cmd>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000862:	e006      	b.n	8000872 <lcd_send_string+0x18>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff75 	bl	800075c <lcd_send_data>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f4      	bne.n	8000864 <lcd_send_string+0xa>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <MX_GPIO_Init+0x120>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a41      	ldr	r2, [pc, #260]	; (80009a4 <MX_GPIO_Init+0x120>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a3b      	ldr	r2, [pc, #236]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a35      	ldr	r2, [pc, #212]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008e6:	f043 0308 	orr.w	r3, r3, #8
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x120>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	210f      	movs	r1, #15
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <MX_GPIO_Init+0x124>)
 80008fe:	f000 feb7 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RW_Pin|RS_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <MX_GPIO_Init+0x128>)
 800090a:	f000 feb1 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN1_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_GPIO_Init+0x12c>)
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4824      	ldr	r0, [pc, #144]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000924:	f000 fd4a 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000928:	230f      	movs	r3, #15
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <MX_GPIO_Init+0x124>)
 8000940:	f000 fd3c 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_Pin|RW_Pin|RS_Pin;
 8000944:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_GPIO_Init+0x128>)
 800095e:	f000 fd2d 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin|BTN2_Pin|BTN1_Pin;
 8000962:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x12c>)
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_GPIO_Init+0x128>)
 8000978:	f000 fd20 	bl	80013bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2017      	movs	r0, #23
 8000982:	f000 fce4 	bl	800134e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000986:	2017      	movs	r0, #23
 8000988:	f000 fcfd 	bl	8001386 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2028      	movs	r0, #40	; 0x28
 8000992:	f000 fcdc 	bl	800134e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f000 fcf5 	bl	8001386 <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	10210000 	.word	0x10210000
 80009b4:	40011000 	.word	0x40011000

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buffer[20] = "INITIALIZATION";
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <main+0xc8>)
 80009c0:	1d3c      	adds	r4, r7, #4
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	c407      	stmia	r4!, {r0, r1, r2}
 80009c6:	8023      	strh	r3, [r4, #0]
 80009c8:	3402      	adds	r4, #2
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	7023      	strb	r3, [r4, #0]
 80009ce:	f107 0313 	add.w	r3, r7, #19
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d8:	f000 fb5e 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009dc:	f000 f860 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f7ff ff50 	bl	8000884 <MX_GPIO_Init>
  MX_TIM3_Init();
 80009e4:	f000 fa66 	bl	8000eb4 <MX_TIM3_Init>
  MX_TIM2_Init();
 80009e8:	f000 f9f0 	bl	8000dcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80009ec:	4825      	ldr	r0, [pc, #148]	; (8000a84 <main+0xcc>)
 80009ee:	f001 faa9 	bl	8001f44 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009f2:	2100      	movs	r1, #0
 80009f4:	4824      	ldr	r0, [pc, #144]	; (8000a88 <main+0xd0>)
 80009f6:	f001 fb47 	bl	8002088 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <main+0xd4>)
 80009fc:	881a      	ldrh	r2, [r3, #0]
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <main+0xd0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	635a      	str	r2, [r3, #52]	; 0x34
  lcd_init();
 8000a04:	f7ff feec 	bl	80007e0 <lcd_init>

  lcd_send_string(buffer);
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff25 	bl	800085a <lcd_send_string>
  HAL_Delay(3000);
 8000a10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a14:	f000 fba2 	bl	800115c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <main+0xd8>)
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <main+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <main+0xd8>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <main+0xd0>)
 8000a2a:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <main+0xd4>)
 8000a2e:	881a      	ldrh	r2, [r3, #0]
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <main+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
	  lcd_clear();
 8000a36:	f7ff feab 	bl	8000790 <lcd_clear>
	  sprintf(buffer, "Freq: %d KHz", calculacte_frequency());
 8000a3a:	f000 f8cd 	bl	8000bd8 <calculacte_frequency>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4914      	ldr	r1, [pc, #80]	; (8000a94 <main+0xdc>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 f9b1 	bl	8002dac <siprintf>
	  lcd_send_string(buffer);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff04 	bl	800085a <lcd_send_string>
	  lcd_put_cur(1, 0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fea5 	bl	80007a4 <lcd_put_cur>

	  sprintf(buffer, "Duty: %d", calculate_duty());
 8000a5a:	f000 f8cd 	bl	8000bf8 <calculate_duty>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <main+0xe0>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 f9a1 	bl	8002dac <siprintf>
	  lcd_send_string(buffer);
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fef4 	bl	800085a <lcd_send_string>
	  lcd_send_string("%");
 8000a72:	480a      	ldr	r0, [pc, #40]	; (8000a9c <main+0xe4>)
 8000a74:	f7ff fef1 	bl	800085a <lcd_send_string>


	  HAL_Delay(50);
 8000a78:	2032      	movs	r0, #50	; 0x32
 8000a7a:	f000 fb6f 	bl	800115c <HAL_Delay>
	  __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000a7e:	e7cb      	b.n	8000a18 <main+0x60>
 8000a80:	08003608 	.word	0x08003608
 8000a84:	2000009c 	.word	0x2000009c
 8000a88:	200000e4 	.word	0x200000e4
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000002 	.word	0x20000002
 8000a94:	080035e8 	.word	0x080035e8
 8000a98:	080035f8 	.word	0x080035f8
 8000a9c:	08003604 	.word	0x08003604

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b090      	sub	sp, #64	; 0x40
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	2228      	movs	r2, #40	; 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 f974 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ade:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fdf1 	bl	80016d0 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000af4:	f000 f8a8 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f85c 	bl	8001bd0 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b1e:	f000 f893 	bl	8000c48 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3740      	adds	r7, #64	; 0x40
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin)
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b3c:	d116      	bne.n	8000b6c <HAL_GPIO_EXTI_Callback+0x40>
	{
		if(period > 239)
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	2bef      	cmp	r3, #239	; 0xef
 8000b44:	d93f      	bls.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
		{
			if(duty >= period)			// to not overlimit duty cycle
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d305      	bcc.n	8000b5e <HAL_GPIO_EXTI_Callback+0x32>
				duty = period - 20;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	3b14      	subs	r3, #20
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b5c:	801a      	strh	r2, [r3, #0]
			period -= 10;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	3b0a      	subs	r3, #10
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b68:	801a      	strh	r2, [r3, #0]
	{
		if(duty < period)
			duty += 10;
	}

}
 8000b6a:	e02c      	b.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == BTN2_Pin)
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	2b80      	cmp	r3, #128	; 0x80
 8000b70:	d10c      	bne.n	8000b8c <HAL_GPIO_EXTI_Callback+0x60>
		if(period < 719 )
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	f240 22ce 	movw	r2, #718	; 0x2ce
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d823      	bhi.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
			period += 10;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	330a      	adds	r3, #10
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b88:	801a      	strh	r2, [r3, #0]
}
 8000b8a:	e01c      	b.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == BTN3_Pin)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	2b40      	cmp	r3, #64	; 0x40
 8000b90:	d10a      	bne.n	8000ba8 <HAL_GPIO_EXTI_Callback+0x7c>
		if(duty > 0)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d015      	beq.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
			duty -= 10;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	3b0a      	subs	r3, #10
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ba4:	801a      	strh	r2, [r3, #0]
}
 8000ba6:	e00e      	b.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == BTN4_Pin)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d10b      	bne.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
		if(duty < period)
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bb0:	881a      	ldrh	r2, [r3, #0]
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d205      	bcs.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
			duty += 10;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	330a      	adds	r3, #10
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bc4:	801a      	strh	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000002 	.word	0x20000002
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <calculacte_frequency>:

int calculacte_frequency()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	return FCLK / (period + 1) / 1000;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <calculacte_frequency+0x18>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <calculacte_frequency+0x1c>)
 8000be4:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000002 	.word	0x20000002
 8000bf4:	00011940 	.word	0x00011940

08000bf8 <calculate_duty>:

int calculate_duty()
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	float result;
	result = (float)duty/(float)period * 100;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <calculate_duty+0x44>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb58 	bl	80002b8 <__aeabi_ui2f>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <calculate_duty+0x48>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fb52 	bl	80002b8 <__aeabi_ui2f>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f7ff fc59 	bl	80004d0 <__aeabi_fdiv>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4908      	ldr	r1, [pc, #32]	; (8000c44 <calculate_duty+0x4c>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fba0 	bl	8000368 <__aeabi_fmul>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	607b      	str	r3, [r7, #4]

	return (int)result;
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fceb 	bl	8000608 <__aeabi_f2iz>
 8000c32:	4603      	mov	r3, r0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000002 	.word	0x20000002
 8000c44:	42c80000 	.word	0x42c80000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_MspInit+0x60>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_MspInit+0x60>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <HardFault_Handler+0x4>

08000cca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 fa0e 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d10:	2020      	movs	r0, #32
 8000d12:	f000 fcc5 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d16:	2040      	movs	r0, #64	; 0x40
 8000d18:	f000 fcc2 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d1c:	2080      	movs	r0, #128	; 0x80
 8000d1e:	f000 fcbf 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d26:	f000 fcbb 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM2_IRQHandler+0x10>)
 8000d36:	f001 fa49 	bl	80021cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000e4 	.word	0x200000e4

08000d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d4c:	f000 fca8 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f001 ffe0 	bl	8002d48 <__errno>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20005000 	.word	0x20005000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20000090 	.word	0x20000090
 8000dbc:	20000138 	.word	0x20000138

08000dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 239;
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e12:	22ef      	movs	r2, #239	; 0xef
 8000e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e22:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e24:	f001 f83e 	bl	8001ea4 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000e2e:	f7ff ff0b 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e40:	f001 fb8a 	bl	8002558 <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000e4a:	f7ff fefd 	bl	8000c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e50:	f001 f8c2 	bl	8001fd8 <HAL_TIM_PWM_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000e5a:	f7ff fef5 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e6e:	f001 fefb 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000e78:	f7ff fee6 	bl	8000c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e94:	f001 faa2 	bl	80023dc <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000e9e:	f7ff fed3 	bl	8000c48 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000ea4:	f000 f88c 	bl	8000fc0 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3738      	adds	r7, #56	; 0x38
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000e4 	.word	0x200000e4

08000eb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <MX_TIM3_Init+0x98>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000ed8:	2247      	movs	r2, #71	; 0x47
 8000eda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000ef8:	f000 ffd4 	bl	8001ea4 <HAL_TIM_Base_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f02:	f7ff fea1 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000f14:	f001 fb20 	bl	8002558 <HAL_TIM_ConfigClockSource>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f7ff fe93 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_TIM3_Init+0x94>)
 8000f30:	f001 fe9a 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f3a:	f7ff fe85 	bl	8000c48 <Error_Handler>
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000009c 	.word	0x2000009c
 8000f4c:	40000400 	.word	0x40000400

08000f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d114      	bne.n	8000f8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_TIM_Base_MspInit+0x68>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_TIM_Base_MspInit+0x68>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_TIM_Base_MspInit+0x68>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	201c      	movs	r0, #28
 8000f80:	f000 f9e5 	bl	800134e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f84:	201c      	movs	r0, #28
 8000f86:	f000 f9fe 	bl	8001386 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f8a:	e010      	b.n	8000fae <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_TIM_Base_MspInit+0x6c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10b      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_TIM_Base_MspInit+0x68>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_TIM_Base_MspInit+0x68>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_TIM_Base_MspInit+0x68>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40000400 	.word	0x40000400

08000fc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fde:	d12a      	bne.n	8001036 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_TIM_MspPostInit+0x80>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_TIM_MspPostInit+0x80>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_TIM_MspPostInit+0x80>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <HAL_TIM_MspPostInit+0x84>)
 800100e:	f000 f9d5 	bl	80013bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_TIM_MspPostInit+0x88>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_TIM_MspPostInit+0x88>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800
 8001048:	40010000 	.word	0x40010000

0800104c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800104c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800104e:	e003      	b.n	8001058 <LoopCopyDataInit>

08001050 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001052:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001054:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001056:	3104      	adds	r1, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800105c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001060:	d3f6      	bcc.n	8001050 <CopyDataInit>
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001064:	e002      	b.n	800106c <LoopFillZerobss>

08001066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001068:	f842 3b04 	str.w	r3, [r2], #4

0800106c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001070:	d3f9      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001072:	f7ff fea5 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f001 fe6d 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff fc9d 	bl	80009b8 <main>
  bx lr
 800107e:	4770      	bx	lr
  ldr r3, =_sidata
 8001080:	0800367c 	.word	0x0800367c
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001088:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800108c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001090:	20000134 	.word	0x20000134

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_Init+0x28>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_Init+0x28>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f945 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fdce 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f95d 	bl	80013a2 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f925 	bl	800134e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000004 	.word	0x20000004
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_IncTick+0x20>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	2000000c 	.word	0x2000000c
 8001144:	2000012c 	.word	0x2000012c

08001148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	2000012c 	.word	0x2000012c

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fff0 	bl	8001148 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_Delay+0x40>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffe0 	bl	8001148 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000000c 	.word	0x2000000c

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4906      	ldr	r1, [pc, #24]	; (8001238 <__NVIC_EnableIRQ+0x34>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f7ff ff90 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff2d 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff42 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff35 	bl	8001204 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffa2 	bl	80012f4 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e127      	b.n	8001620 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8116 	bne.w	800161a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d034      	beq.n	8001460 <HAL_GPIO_Init+0xa4>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d80d      	bhi.n	8001416 <HAL_GPIO_Init+0x5a>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x9a>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d804      	bhi.n	800140c <HAL_GPIO_Init+0x50>
 8001402:	2b00      	cmp	r3, #0
 8001404:	d031      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001406:	2b01      	cmp	r3, #1
 8001408:	d01c      	beq.n	8001444 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e048      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800140c:	2b03      	cmp	r3, #3
 800140e:	d043      	beq.n	8001498 <HAL_GPIO_Init+0xdc>
 8001410:	2b11      	cmp	r3, #17
 8001412:	d01b      	beq.n	800144c <HAL_GPIO_Init+0x90>
          break;
 8001414:	e043      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001416:	4a89      	ldr	r2, [pc, #548]	; (800163c <HAL_GPIO_Init+0x280>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d026      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800141c:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_GPIO_Init+0x280>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d806      	bhi.n	8001430 <HAL_GPIO_Init+0x74>
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_GPIO_Init+0x284>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d020      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001428:	4a86      	ldr	r2, [pc, #536]	; (8001644 <HAL_GPIO_Init+0x288>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01d      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 800142e:	e036      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001430:	4a85      	ldr	r2, [pc, #532]	; (8001648 <HAL_GPIO_Init+0x28c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001436:	4a85      	ldr	r2, [pc, #532]	; (800164c <HAL_GPIO_Init+0x290>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d016      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800143c:	4a84      	ldr	r2, [pc, #528]	; (8001650 <HAL_GPIO_Init+0x294>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e028      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e023      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01e      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e019      	b.n	800149e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e012      	b.n	800149e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d801      	bhi.n	80014a8 <HAL_GPIO_Init+0xec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e001      	b.n	80014ac <HAL_GPIO_Init+0xf0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3304      	adds	r3, #4
 80014ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d802      	bhi.n	80014ba <HAL_GPIO_Init+0xfe>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x104>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3b08      	subs	r3, #8
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	210f      	movs	r1, #15
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8096 	beq.w	800161a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001506:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_GPIO_Init+0x29c>)
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x19e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x19a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x196>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x192>
 800154a:	2303      	movs	r3, #3
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800154e:	2304      	movs	r3, #4
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800155a:	2300      	movs	r3, #0
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156c:	493a      	ldr	r1, [pc, #232]	; (8001658 <HAL_GPIO_Init+0x29c>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4938      	ldr	r1, [pc, #224]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	43db      	mvns	r3, r3
 800159c:	4933      	ldr	r1, [pc, #204]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	492e      	ldr	r1, [pc, #184]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4929      	ldr	r1, [pc, #164]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	4924      	ldr	r1, [pc, #144]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	491f      	ldr	r1, [pc, #124]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	491a      	ldr	r1, [pc, #104]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4915      	ldr	r1, [pc, #84]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001616:	4013      	ands	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f aed0 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	372c      	adds	r7, #44	; 0x2c
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	10210000 	.word	0x10210000
 8001640:	10110000 	.word	0x10110000
 8001644:	10120000 	.word	0x10120000
 8001648:	10310000 	.word	0x10310000
 800164c:	10320000 	.word	0x10320000
 8001650:	10220000 	.word	0x10220000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011000 	.word	0x40011000
 8001668:	40011400 	.word	0x40011400
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fa34 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e26c      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f0:	4b92      	ldr	r3, [pc, #584]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00c      	beq.n	8001716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fc:	4b8f      	ldr	r3, [pc, #572]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
 8001708:	4b8c      	ldr	r3, [pc, #560]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b89      	ldr	r3, [pc, #548]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x12c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e246      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	4b80      	ldr	r3, [pc, #512]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a7f      	ldr	r2, [pc, #508]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b7b      	ldr	r3, [pc, #492]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7a      	ldr	r2, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a77      	ldr	r2, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xbc>
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a71      	ldr	r2, [pc, #452]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 800178c:	4b6b      	ldr	r3, [pc, #428]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a67      	ldr	r2, [pc, #412]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fccc 	bl	8001148 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fcc8 	bl	8001148 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1fa      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe4>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fcb8 	bl	8001148 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fcb4 	bl	8001148 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1e6      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1ba      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4939      	ldr	r1, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_RCC_OscConfig+0x270>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fc6d 	bl	8001148 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fc69 	bl	8001148 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e19b      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4927      	ldr	r1, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_RCC_OscConfig+0x270>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fc4c 	bl	8001148 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fc48 	bl	8001148 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e17a      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03a      	beq.n	8001954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_RCC_OscConfig+0x274>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fc2c 	bl	8001148 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fc28 	bl	8001148 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e15a      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 faa8 	bl	8001e68 <RCC_Delay>
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_OscConfig+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff fc12 	bl	8001148 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fc0e 	bl	8001148 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d908      	bls.n	8001948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e140      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	42420000 	.word	0x42420000
 8001944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b9e      	ldr	r3, [pc, #632]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e9      	bne.n	8001928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a6 	beq.w	8001aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b97      	ldr	r3, [pc, #604]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b94      	ldr	r3, [pc, #592]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a93      	ldr	r2, [pc, #588]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b91      	ldr	r3, [pc, #580]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b8e      	ldr	r3, [pc, #568]	; (8001bc8 <HAL_RCC_OscConfig+0x4f8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b8b      	ldr	r3, [pc, #556]	; (8001bc8 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a8a      	ldr	r2, [pc, #552]	; (8001bc8 <HAL_RCC_OscConfig+0x4f8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fbcf 	bl	8001148 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff fbcb 	bl	8001148 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0fd      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b81      	ldr	r3, [pc, #516]	; (8001bc8 <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019d4:	4b7b      	ldr	r3, [pc, #492]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a7a      	ldr	r2, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e02d      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x334>
 80019ea:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a75      	ldr	r2, [pc, #468]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a72      	ldr	r2, [pc, #456]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e01c      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x356>
 8001a0c:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a6c      	ldr	r2, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a69      	ldr	r2, [pc, #420]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a26:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a66      	ldr	r2, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a63      	ldr	r2, [pc, #396]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff fb7f 	bl	8001148 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fb7b 	bl	8001148 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0ab      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCC_OscConfig+0x37e>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fb69 	bl	8001148 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fb65 	bl	8001148 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e095      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a47      	ldr	r2, [pc, #284]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8081 	beq.w	8001bba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d061      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d146      	bne.n	8001b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_OscConfig+0x4fc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fb39 	bl	8001148 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fb35 	bl	8001148 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e067      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	492d      	ldr	r1, [pc, #180]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a19      	ldr	r1, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	430b      	orrs	r3, r1
 8001b26:	4927      	ldr	r1, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x4fc>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fb09 	bl	8001148 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fb05 	bl	8001148 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e037      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
 8001b58:	e02f      	b.n	8001bba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_RCC_OscConfig+0x4fc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff faf2 	bl	8001148 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff faee 	bl	8001148 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e020      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x498>
 8001b86:	e018      	b.n	8001bba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e013      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42420060 	.word	0x42420060

08001bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0d0      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d910      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 0207 	bic.w	r2, r3, #7
 8001bfa:	4965      	ldr	r1, [pc, #404]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0b8      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a52      	ldr	r2, [pc, #328]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	494d      	ldr	r1, [pc, #308]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d040      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d115      	bne.n	8001cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e07f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e073      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06b      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4936      	ldr	r1, [pc, #216]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc0:	f7ff fa42 	bl	8001148 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7ff fa3e 	bl	8001148 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e053      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d210      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 0207 	bic.w	r2, r3, #7
 8001d06:	4922      	ldr	r1, [pc, #136]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e032      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4916      	ldr	r1, [pc, #88]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5e:	f000 f821 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d62:	4601      	mov	r1, r0
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	fa21 f303 	lsr.w	r3, r1, r3
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1cc>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9a0 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08003630 	.word	0x08003630
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b490      	push	{r4, r7}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dac:	1d3c      	adds	r4, r7, #4
 8001dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x46>
 8001de2:	e02d      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de6:	623b      	str	r3, [r7, #32]
      break;
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001df6:	4413      	add	r3, r2
 8001df8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0c5b      	lsrs	r3, r3, #17
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e16:	4413      	add	r3, r2
 8001e18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e22:	fb02 f203 	mul.w	r2, r2, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	e004      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	623b      	str	r3, [r7, #32]
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e42:	623b      	str	r3, [r7, #32]
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc90      	pop	{r4, r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	0800361c 	.word	0x0800361c
 8001e58:	0800362c 	.word	0x0800362c
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	007a1200 	.word	0x007a1200
 8001e64:	003d0900 	.word	0x003d0900

08001e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <RCC_Delay+0x34>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <RCC_Delay+0x38>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a5b      	lsrs	r3, r3, #9
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e84:	bf00      	nop
  }
  while (Delay --);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <RCC_Delay+0x1c>
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e041      	b.n	8001f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f840 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 fc1c 	bl	8002720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_TIM_Base_Start+0x88>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00e      	beq.n	8001f8c <HAL_TIM_Base_Start+0x48>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f76:	d009      	beq.n	8001f8c <HAL_TIM_Base_Start+0x48>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_TIM_Base_Start+0x8c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_TIM_Base_Start+0x48>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <HAL_TIM_Base_Start+0x90>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d111      	bne.n	8001fb0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d010      	beq.n	8001fc0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fae:	e007      	b.n	8001fc0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800

08001fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f839 	bl	8002076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 fb82 	bl	8002720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_TIM_PWM_Start+0x24>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e022      	b.n	80020f2 <HAL_TIM_PWM_Start+0x6a>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d109      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x3e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e015      	b.n	80020f2 <HAL_TIM_PWM_Start+0x6a>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d109      	bne.n	80020e0 <HAL_TIM_PWM_Start+0x58>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e008      	b.n	80020f2 <HAL_TIM_PWM_Start+0x6a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e05e      	b.n	80021b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d104      	bne.n	800210a <HAL_TIM_PWM_Start+0x82>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002108:	e013      	b.n	8002132 <HAL_TIM_PWM_Start+0xaa>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start+0x92>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002118:	e00b      	b.n	8002132 <HAL_TIM_PWM_Start+0xaa>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d104      	bne.n	800212a <HAL_TIM_PWM_Start+0xa2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002128:	e003      	b.n	8002132 <HAL_TIM_PWM_Start+0xaa>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fd70 	bl	8002c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_TIM_PWM_Start+0x138>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d107      	bne.n	800215a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_TIM_PWM_Start+0x138>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_TIM_PWM_Start+0xfa>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d009      	beq.n	8002182 <HAL_TIM_PWM_Start+0xfa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_TIM_PWM_Start+0x13c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_TIM_PWM_Start+0xfa>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_TIM_PWM_Start+0x140>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d010      	beq.n	80021b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	e007      	b.n	80021b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800

080021cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0202 	mvn.w	r2, #2
 80021f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa6b 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fa5e 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fa6d 	bl	80026fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0204 	mvn.w	r2, #4
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa41 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa34 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fa43 	bl	80026fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b08      	cmp	r3, #8
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa17 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fa0a 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fa19 	bl	80026fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0210 	mvn.w	r2, #16
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2208      	movs	r2, #8
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9ed 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9e0 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f9ef 	bl	80026fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0201 	mvn.w	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f9bb 	bl	80026c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fcdd 	bl	8002d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f9b3 	bl	800270e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0220 	mvn.w	r2, #32
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fca8 	bl	8002d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0ac      	b.n	8002550 <HAL_TIM_PWM_ConfigChannel+0x174>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0c      	cmp	r3, #12
 8002402:	f200 809f 	bhi.w	8002544 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002406:	a201      	add	r2, pc, #4	; (adr r2, 800240c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240c:	08002441 	.word	0x08002441
 8002410:	08002545 	.word	0x08002545
 8002414:	08002545 	.word	0x08002545
 8002418:	08002545 	.word	0x08002545
 800241c:	08002481 	.word	0x08002481
 8002420:	08002545 	.word	0x08002545
 8002424:	08002545 	.word	0x08002545
 8002428:	08002545 	.word	0x08002545
 800242c:	080024c3 	.word	0x080024c3
 8002430:	08002545 	.word	0x08002545
 8002434:	08002545 	.word	0x08002545
 8002438:	08002545 	.word	0x08002545
 800243c:	08002503 	.word	0x08002503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f9cc 	bl	80027e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0208 	orr.w	r2, r2, #8
 800245a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6999      	ldr	r1, [r3, #24]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	619a      	str	r2, [r3, #24]
      break;
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa12 	bl	80028b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6999      	ldr	r1, [r3, #24]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	619a      	str	r2, [r3, #24]
      break;
 80024c0:	e041      	b.n	8002546 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fa5b 	bl	8002984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0208 	orr.w	r2, r2, #8
 80024dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0204 	bic.w	r2, r2, #4
 80024ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69d9      	ldr	r1, [r3, #28]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]
      break;
 8002500:	e021      	b.n	8002546 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 faa5 	bl	8002a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	021a      	lsls	r2, r3, #8
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	61da      	str	r2, [r3, #28]
      break;
 8002542:	e000      	b.n	8002546 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002544:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_TIM_ConfigClockSource+0x18>
 800256c:	2302      	movs	r3, #2
 800256e:	e0a6      	b.n	80026be <HAL_TIM_ConfigClockSource+0x166>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002596:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d067      	beq.n	8002678 <HAL_TIM_ConfigClockSource+0x120>
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d80b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x6c>
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d073      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0x140>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d802      	bhi.n	80025ba <HAL_TIM_ConfigClockSource+0x62>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d06f      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025b8:	e078      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d06c      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0x140>
 80025be:	2b30      	cmp	r3, #48	; 0x30
 80025c0:	d06a      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025c2:	e073      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025c4:	2b70      	cmp	r3, #112	; 0x70
 80025c6:	d00d      	beq.n	80025e4 <HAL_TIM_ConfigClockSource+0x8c>
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d804      	bhi.n	80025d6 <HAL_TIM_ConfigClockSource+0x7e>
 80025cc:	2b50      	cmp	r3, #80	; 0x50
 80025ce:	d033      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0xe0>
 80025d0:	2b60      	cmp	r3, #96	; 0x60
 80025d2:	d041      	beq.n	8002658 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025d4:	e06a      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d066      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x152>
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e0:	d017      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025e2:	e063      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f000 faf5 	bl	8002be2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002606:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]
      break;
 8002610:	e04c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f000 fade 	bl	8002be2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002634:	609a      	str	r2, [r3, #8]
      break;
 8002636:	e039      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	461a      	mov	r2, r3
 8002646:	f000 fa55 	bl	8002af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2150      	movs	r1, #80	; 0x50
 8002650:	4618      	mov	r0, r3
 8002652:	f000 faac 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002656:	e029      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	461a      	mov	r2, r3
 8002666:	f000 fa73 	bl	8002b50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2160      	movs	r1, #96	; 0x60
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fa9c 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002676:	e019      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	461a      	mov	r2, r3
 8002686:	f000 fa35 	bl	8002af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa8c 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002696:	e009      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 fa83 	bl	8002bae <TIM_ITRx_SetConfig>
        break;
 80026a8:	e000      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a29      	ldr	r2, [pc, #164]	; (80027d8 <TIM_Base_SetConfig+0xb8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00b      	beq.n	8002750 <TIM_Base_SetConfig+0x30>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273e:	d007      	beq.n	8002750 <TIM_Base_SetConfig+0x30>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a26      	ldr	r2, [pc, #152]	; (80027dc <TIM_Base_SetConfig+0xbc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x30>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <TIM_Base_SetConfig+0xc0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <TIM_Base_SetConfig+0xb8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0x62>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <TIM_Base_SetConfig+0xbc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <TIM_Base_SetConfig+0xc0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <TIM_Base_SetConfig+0xb8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d103      	bne.n	80027c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	615a      	str	r2, [r3, #20]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800

080027e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <TIM_OC1_SetConfig+0xc8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10c      	bne.n	800285a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f023 0308 	bic.w	r3, r3, #8
 8002846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a13      	ldr	r2, [pc, #76]	; (80028ac <TIM_OC1_SetConfig+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d111      	bne.n	8002886 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0320 	bic.w	r3, r3, #32
 80028fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <TIM_OC2_SetConfig+0xd0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d10d      	bne.n	800292c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <TIM_OC2_SetConfig+0xd0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d113      	bne.n	800295c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	621a      	str	r2, [r3, #32]
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00

08002984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <TIM_OC3_SetConfig+0xd0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10d      	bne.n	80029fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <TIM_OC3_SetConfig+0xd0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d113      	bne.n	8002a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	621a      	str	r2, [r3, #32]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	031b      	lsls	r3, r3, #12
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <TIM_OC4_SetConfig+0x98>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d109      	bne.n	8002acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	019b      	lsls	r3, r3, #6
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00

08002af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f023 0201 	bic.w	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f023 030a 	bic.w	r3, r3, #10
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f023 0210 	bic.w	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	031b      	lsls	r3, r3, #12
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f043 0307 	orr.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b087      	sub	sp, #28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	021a      	lsls	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	609a      	str	r2, [r3, #8]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2201      	movs	r2, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1a      	ldr	r2, [r3, #32]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e046      	b.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d009      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10c      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800

08002d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <__errno>:
 8002d48:	4b01      	ldr	r3, [pc, #4]	; (8002d50 <__errno+0x8>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000010 	.word	0x20000010

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	2500      	movs	r5, #0
 8002d58:	4e0c      	ldr	r6, [pc, #48]	; (8002d8c <__libc_init_array+0x38>)
 8002d5a:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5c:	1ba4      	subs	r4, r4, r6
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	f000 fc34 	bl	80035d0 <_init>
 8002d68:	2500      	movs	r5, #0
 8002d6a:	4e0a      	ldr	r6, [pc, #40]	; (8002d94 <__libc_init_array+0x40>)
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	; (8002d98 <__libc_init_array+0x44>)
 8002d6e:	1ba4      	subs	r4, r4, r6
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	42a5      	cmp	r5, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7c:	4798      	blx	r3
 8002d7e:	3501      	adds	r5, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d86:	4798      	blx	r3
 8002d88:	3501      	adds	r5, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08003674 	.word	0x08003674
 8002d90:	08003674 	.word	0x08003674
 8002d94:	08003674 	.word	0x08003674
 8002d98:	08003678 	.word	0x08003678

08002d9c <memset>:
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4402      	add	r2, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <siprintf>:
 8002dac:	b40e      	push	{r1, r2, r3}
 8002dae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002db2:	b500      	push	{lr}
 8002db4:	b09c      	sub	sp, #112	; 0x70
 8002db6:	ab1d      	add	r3, sp, #116	; 0x74
 8002db8:	9002      	str	r0, [sp, #8]
 8002dba:	9006      	str	r0, [sp, #24]
 8002dbc:	9107      	str	r1, [sp, #28]
 8002dbe:	9104      	str	r1, [sp, #16]
 8002dc0:	4808      	ldr	r0, [pc, #32]	; (8002de4 <siprintf+0x38>)
 8002dc2:	4909      	ldr	r1, [pc, #36]	; (8002de8 <siprintf+0x3c>)
 8002dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dc8:	9105      	str	r1, [sp, #20]
 8002dca:	6800      	ldr	r0, [r0, #0]
 8002dcc:	a902      	add	r1, sp, #8
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	f000 f866 	bl	8002ea0 <_svfiprintf_r>
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	9b02      	ldr	r3, [sp, #8]
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	b01c      	add	sp, #112	; 0x70
 8002ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002de0:	b003      	add	sp, #12
 8002de2:	4770      	bx	lr
 8002de4:	20000010 	.word	0x20000010
 8002de8:	ffff0208 	.word	0xffff0208

08002dec <__ssputs_r>:
 8002dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df0:	688e      	ldr	r6, [r1, #8]
 8002df2:	4682      	mov	sl, r0
 8002df4:	429e      	cmp	r6, r3
 8002df6:	460c      	mov	r4, r1
 8002df8:	4690      	mov	r8, r2
 8002dfa:	4699      	mov	r9, r3
 8002dfc:	d837      	bhi.n	8002e6e <__ssputs_r+0x82>
 8002dfe:	898a      	ldrh	r2, [r1, #12]
 8002e00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e04:	d031      	beq.n	8002e6a <__ssputs_r+0x7e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	6825      	ldr	r5, [r4, #0]
 8002e0a:	6909      	ldr	r1, [r1, #16]
 8002e0c:	1a6f      	subs	r7, r5, r1
 8002e0e:	6965      	ldr	r5, [r4, #20]
 8002e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e14:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e18:	f109 0301 	add.w	r3, r9, #1
 8002e1c:	443b      	add	r3, r7
 8002e1e:	429d      	cmp	r5, r3
 8002e20:	bf38      	it	cc
 8002e22:	461d      	movcc	r5, r3
 8002e24:	0553      	lsls	r3, r2, #21
 8002e26:	d530      	bpl.n	8002e8a <__ssputs_r+0x9e>
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f000 fb37 	bl	800349c <_malloc_r>
 8002e2e:	4606      	mov	r6, r0
 8002e30:	b950      	cbnz	r0, 8002e48 <__ssputs_r+0x5c>
 8002e32:	230c      	movs	r3, #12
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f8ca 3000 	str.w	r3, [sl]
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e48:	463a      	mov	r2, r7
 8002e4a:	6921      	ldr	r1, [r4, #16]
 8002e4c:	f000 fab6 	bl	80033bc <memcpy>
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	6126      	str	r6, [r4, #16]
 8002e5e:	443e      	add	r6, r7
 8002e60:	6026      	str	r6, [r4, #0]
 8002e62:	464e      	mov	r6, r9
 8002e64:	6165      	str	r5, [r4, #20]
 8002e66:	1bed      	subs	r5, r5, r7
 8002e68:	60a5      	str	r5, [r4, #8]
 8002e6a:	454e      	cmp	r6, r9
 8002e6c:	d900      	bls.n	8002e70 <__ssputs_r+0x84>
 8002e6e:	464e      	mov	r6, r9
 8002e70:	4632      	mov	r2, r6
 8002e72:	4641      	mov	r1, r8
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	f000 faac 	bl	80033d2 <memmove>
 8002e7a:	68a3      	ldr	r3, [r4, #8]
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	1b9b      	subs	r3, r3, r6
 8002e80:	60a3      	str	r3, [r4, #8]
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	441e      	add	r6, r3
 8002e86:	6026      	str	r6, [r4, #0]
 8002e88:	e7dc      	b.n	8002e44 <__ssputs_r+0x58>
 8002e8a:	462a      	mov	r2, r5
 8002e8c:	f000 fb60 	bl	8003550 <_realloc_r>
 8002e90:	4606      	mov	r6, r0
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d1e2      	bne.n	8002e5c <__ssputs_r+0x70>
 8002e96:	6921      	ldr	r1, [r4, #16]
 8002e98:	4650      	mov	r0, sl
 8002e9a:	f000 fab3 	bl	8003404 <_free_r>
 8002e9e:	e7c8      	b.n	8002e32 <__ssputs_r+0x46>

08002ea0 <_svfiprintf_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	898b      	ldrh	r3, [r1, #12]
 8002ea8:	b09d      	sub	sp, #116	; 0x74
 8002eaa:	061f      	lsls	r7, r3, #24
 8002eac:	4680      	mov	r8, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	4616      	mov	r6, r2
 8002eb2:	d50f      	bpl.n	8002ed4 <_svfiprintf_r+0x34>
 8002eb4:	690b      	ldr	r3, [r1, #16]
 8002eb6:	b96b      	cbnz	r3, 8002ed4 <_svfiprintf_r+0x34>
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	f000 faef 	bl	800349c <_malloc_r>
 8002ebe:	6020      	str	r0, [r4, #0]
 8002ec0:	6120      	str	r0, [r4, #16]
 8002ec2:	b928      	cbnz	r0, 8002ed0 <_svfiprintf_r+0x30>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	f8c8 3000 	str.w	r3, [r8]
 8002eca:	f04f 30ff 	mov.w	r0, #4294967295
 8002ece:	e0c8      	b.n	8003062 <_svfiprintf_r+0x1c2>
 8002ed0:	2340      	movs	r3, #64	; 0x40
 8002ed2:	6163      	str	r3, [r4, #20]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed8:	2320      	movs	r3, #32
 8002eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ede:	2330      	movs	r3, #48	; 0x30
 8002ee0:	f04f 0b01 	mov.w	fp, #1
 8002ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ee8:	9503      	str	r5, [sp, #12]
 8002eea:	4637      	mov	r7, r6
 8002eec:	463d      	mov	r5, r7
 8002eee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ef2:	b10b      	cbz	r3, 8002ef8 <_svfiprintf_r+0x58>
 8002ef4:	2b25      	cmp	r3, #37	; 0x25
 8002ef6:	d13e      	bne.n	8002f76 <_svfiprintf_r+0xd6>
 8002ef8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002efc:	d00b      	beq.n	8002f16 <_svfiprintf_r+0x76>
 8002efe:	4653      	mov	r3, sl
 8002f00:	4632      	mov	r2, r6
 8002f02:	4621      	mov	r1, r4
 8002f04:	4640      	mov	r0, r8
 8002f06:	f7ff ff71 	bl	8002dec <__ssputs_r>
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	f000 80a4 	beq.w	8003058 <_svfiprintf_r+0x1b8>
 8002f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f12:	4453      	add	r3, sl
 8002f14:	9309      	str	r3, [sp, #36]	; 0x24
 8002f16:	783b      	ldrb	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 809d 	beq.w	8003058 <_svfiprintf_r+0x1b8>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f04f 32ff 	mov.w	r2, #4294967295
 8002f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f28:	9304      	str	r3, [sp, #16]
 8002f2a:	9307      	str	r3, [sp, #28]
 8002f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f30:	931a      	str	r3, [sp, #104]	; 0x68
 8002f32:	462f      	mov	r7, r5
 8002f34:	2205      	movs	r2, #5
 8002f36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f3a:	4850      	ldr	r0, [pc, #320]	; (800307c <_svfiprintf_r+0x1dc>)
 8002f3c:	f000 fa30 	bl	80033a0 <memchr>
 8002f40:	9b04      	ldr	r3, [sp, #16]
 8002f42:	b9d0      	cbnz	r0, 8002f7a <_svfiprintf_r+0xda>
 8002f44:	06d9      	lsls	r1, r3, #27
 8002f46:	bf44      	itt	mi
 8002f48:	2220      	movmi	r2, #32
 8002f4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f4e:	071a      	lsls	r2, r3, #28
 8002f50:	bf44      	itt	mi
 8002f52:	222b      	movmi	r2, #43	; 0x2b
 8002f54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f58:	782a      	ldrb	r2, [r5, #0]
 8002f5a:	2a2a      	cmp	r2, #42	; 0x2a
 8002f5c:	d015      	beq.n	8002f8a <_svfiprintf_r+0xea>
 8002f5e:	462f      	mov	r7, r5
 8002f60:	2000      	movs	r0, #0
 8002f62:	250a      	movs	r5, #10
 8002f64:	9a07      	ldr	r2, [sp, #28]
 8002f66:	4639      	mov	r1, r7
 8002f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f6c:	3b30      	subs	r3, #48	; 0x30
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	d94d      	bls.n	800300e <_svfiprintf_r+0x16e>
 8002f72:	b1b8      	cbz	r0, 8002fa4 <_svfiprintf_r+0x104>
 8002f74:	e00f      	b.n	8002f96 <_svfiprintf_r+0xf6>
 8002f76:	462f      	mov	r7, r5
 8002f78:	e7b8      	b.n	8002eec <_svfiprintf_r+0x4c>
 8002f7a:	4a40      	ldr	r2, [pc, #256]	; (800307c <_svfiprintf_r+0x1dc>)
 8002f7c:	463d      	mov	r5, r7
 8002f7e:	1a80      	subs	r0, r0, r2
 8002f80:	fa0b f000 	lsl.w	r0, fp, r0
 8002f84:	4318      	orrs	r0, r3
 8002f86:	9004      	str	r0, [sp, #16]
 8002f88:	e7d3      	b.n	8002f32 <_svfiprintf_r+0x92>
 8002f8a:	9a03      	ldr	r2, [sp, #12]
 8002f8c:	1d11      	adds	r1, r2, #4
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	9103      	str	r1, [sp, #12]
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	db01      	blt.n	8002f9a <_svfiprintf_r+0xfa>
 8002f96:	9207      	str	r2, [sp, #28]
 8002f98:	e004      	b.n	8002fa4 <_svfiprintf_r+0x104>
 8002f9a:	4252      	negs	r2, r2
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	9207      	str	r2, [sp, #28]
 8002fa2:	9304      	str	r3, [sp, #16]
 8002fa4:	783b      	ldrb	r3, [r7, #0]
 8002fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8002fa8:	d10c      	bne.n	8002fc4 <_svfiprintf_r+0x124>
 8002faa:	787b      	ldrb	r3, [r7, #1]
 8002fac:	2b2a      	cmp	r3, #42	; 0x2a
 8002fae:	d133      	bne.n	8003018 <_svfiprintf_r+0x178>
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	3702      	adds	r7, #2
 8002fb4:	1d1a      	adds	r2, r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9203      	str	r2, [sp, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfb8      	it	lt
 8002fbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fc2:	9305      	str	r3, [sp, #20]
 8002fc4:	4d2e      	ldr	r5, [pc, #184]	; (8003080 <_svfiprintf_r+0x1e0>)
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	7839      	ldrb	r1, [r7, #0]
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f000 f9e8 	bl	80033a0 <memchr>
 8002fd0:	b138      	cbz	r0, 8002fe2 <_svfiprintf_r+0x142>
 8002fd2:	2340      	movs	r3, #64	; 0x40
 8002fd4:	1b40      	subs	r0, r0, r5
 8002fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8002fda:	9b04      	ldr	r3, [sp, #16]
 8002fdc:	3701      	adds	r7, #1
 8002fde:	4303      	orrs	r3, r0
 8002fe0:	9304      	str	r3, [sp, #16]
 8002fe2:	7839      	ldrb	r1, [r7, #0]
 8002fe4:	2206      	movs	r2, #6
 8002fe6:	4827      	ldr	r0, [pc, #156]	; (8003084 <_svfiprintf_r+0x1e4>)
 8002fe8:	1c7e      	adds	r6, r7, #1
 8002fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fee:	f000 f9d7 	bl	80033a0 <memchr>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d038      	beq.n	8003068 <_svfiprintf_r+0x1c8>
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <_svfiprintf_r+0x1e8>)
 8002ff8:	bb13      	cbnz	r3, 8003040 <_svfiprintf_r+0x1a0>
 8002ffa:	9b03      	ldr	r3, [sp, #12]
 8002ffc:	3307      	adds	r3, #7
 8002ffe:	f023 0307 	bic.w	r3, r3, #7
 8003002:	3308      	adds	r3, #8
 8003004:	9303      	str	r3, [sp, #12]
 8003006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003008:	444b      	add	r3, r9
 800300a:	9309      	str	r3, [sp, #36]	; 0x24
 800300c:	e76d      	b.n	8002eea <_svfiprintf_r+0x4a>
 800300e:	fb05 3202 	mla	r2, r5, r2, r3
 8003012:	2001      	movs	r0, #1
 8003014:	460f      	mov	r7, r1
 8003016:	e7a6      	b.n	8002f66 <_svfiprintf_r+0xc6>
 8003018:	2300      	movs	r3, #0
 800301a:	250a      	movs	r5, #10
 800301c:	4619      	mov	r1, r3
 800301e:	3701      	adds	r7, #1
 8003020:	9305      	str	r3, [sp, #20]
 8003022:	4638      	mov	r0, r7
 8003024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003028:	3a30      	subs	r2, #48	; 0x30
 800302a:	2a09      	cmp	r2, #9
 800302c:	d903      	bls.n	8003036 <_svfiprintf_r+0x196>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0c8      	beq.n	8002fc4 <_svfiprintf_r+0x124>
 8003032:	9105      	str	r1, [sp, #20]
 8003034:	e7c6      	b.n	8002fc4 <_svfiprintf_r+0x124>
 8003036:	fb05 2101 	mla	r1, r5, r1, r2
 800303a:	2301      	movs	r3, #1
 800303c:	4607      	mov	r7, r0
 800303e:	e7f0      	b.n	8003022 <_svfiprintf_r+0x182>
 8003040:	ab03      	add	r3, sp, #12
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4622      	mov	r2, r4
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <_svfiprintf_r+0x1ec>)
 8003048:	a904      	add	r1, sp, #16
 800304a:	4640      	mov	r0, r8
 800304c:	f3af 8000 	nop.w
 8003050:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003054:	4681      	mov	r9, r0
 8003056:	d1d6      	bne.n	8003006 <_svfiprintf_r+0x166>
 8003058:	89a3      	ldrh	r3, [r4, #12]
 800305a:	065b      	lsls	r3, r3, #25
 800305c:	f53f af35 	bmi.w	8002eca <_svfiprintf_r+0x2a>
 8003060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003062:	b01d      	add	sp, #116	; 0x74
 8003064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003068:	ab03      	add	r3, sp, #12
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4622      	mov	r2, r4
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <_svfiprintf_r+0x1ec>)
 8003070:	a904      	add	r1, sp, #16
 8003072:	4640      	mov	r0, r8
 8003074:	f000 f882 	bl	800317c <_printf_i>
 8003078:	e7ea      	b.n	8003050 <_svfiprintf_r+0x1b0>
 800307a:	bf00      	nop
 800307c:	08003640 	.word	0x08003640
 8003080:	08003646 	.word	0x08003646
 8003084:	0800364a 	.word	0x0800364a
 8003088:	00000000 	.word	0x00000000
 800308c:	08002ded 	.word	0x08002ded

08003090 <_printf_common>:
 8003090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003094:	4691      	mov	r9, r2
 8003096:	461f      	mov	r7, r3
 8003098:	688a      	ldr	r2, [r1, #8]
 800309a:	690b      	ldr	r3, [r1, #16]
 800309c:	4606      	mov	r6, r0
 800309e:	4293      	cmp	r3, r2
 80030a0:	bfb8      	it	lt
 80030a2:	4613      	movlt	r3, r2
 80030a4:	f8c9 3000 	str.w	r3, [r9]
 80030a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030ac:	460c      	mov	r4, r1
 80030ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030b2:	b112      	cbz	r2, 80030ba <_printf_common+0x2a>
 80030b4:	3301      	adds	r3, #1
 80030b6:	f8c9 3000 	str.w	r3, [r9]
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	0699      	lsls	r1, r3, #26
 80030be:	bf42      	ittt	mi
 80030c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030c4:	3302      	addmi	r3, #2
 80030c6:	f8c9 3000 	strmi.w	r3, [r9]
 80030ca:	6825      	ldr	r5, [r4, #0]
 80030cc:	f015 0506 	ands.w	r5, r5, #6
 80030d0:	d107      	bne.n	80030e2 <_printf_common+0x52>
 80030d2:	f104 0a19 	add.w	sl, r4, #25
 80030d6:	68e3      	ldr	r3, [r4, #12]
 80030d8:	f8d9 2000 	ldr.w	r2, [r9]
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	42ab      	cmp	r3, r5
 80030e0:	dc29      	bgt.n	8003136 <_printf_common+0xa6>
 80030e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	3300      	adds	r3, #0
 80030ea:	bf18      	it	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	0692      	lsls	r2, r2, #26
 80030f0:	d42e      	bmi.n	8003150 <_printf_common+0xc0>
 80030f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030f6:	4639      	mov	r1, r7
 80030f8:	4630      	mov	r0, r6
 80030fa:	47c0      	blx	r8
 80030fc:	3001      	adds	r0, #1
 80030fe:	d021      	beq.n	8003144 <_printf_common+0xb4>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	68e5      	ldr	r5, [r4, #12]
 8003104:	f003 0306 	and.w	r3, r3, #6
 8003108:	2b04      	cmp	r3, #4
 800310a:	bf18      	it	ne
 800310c:	2500      	movne	r5, #0
 800310e:	f8d9 2000 	ldr.w	r2, [r9]
 8003112:	f04f 0900 	mov.w	r9, #0
 8003116:	bf08      	it	eq
 8003118:	1aad      	subeq	r5, r5, r2
 800311a:	68a3      	ldr	r3, [r4, #8]
 800311c:	6922      	ldr	r2, [r4, #16]
 800311e:	bf08      	it	eq
 8003120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003124:	4293      	cmp	r3, r2
 8003126:	bfc4      	itt	gt
 8003128:	1a9b      	subgt	r3, r3, r2
 800312a:	18ed      	addgt	r5, r5, r3
 800312c:	341a      	adds	r4, #26
 800312e:	454d      	cmp	r5, r9
 8003130:	d11a      	bne.n	8003168 <_printf_common+0xd8>
 8003132:	2000      	movs	r0, #0
 8003134:	e008      	b.n	8003148 <_printf_common+0xb8>
 8003136:	2301      	movs	r3, #1
 8003138:	4652      	mov	r2, sl
 800313a:	4639      	mov	r1, r7
 800313c:	4630      	mov	r0, r6
 800313e:	47c0      	blx	r8
 8003140:	3001      	adds	r0, #1
 8003142:	d103      	bne.n	800314c <_printf_common+0xbc>
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314c:	3501      	adds	r5, #1
 800314e:	e7c2      	b.n	80030d6 <_printf_common+0x46>
 8003150:	2030      	movs	r0, #48	; 0x30
 8003152:	18e1      	adds	r1, r4, r3
 8003154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800315e:	4422      	add	r2, r4
 8003160:	3302      	adds	r3, #2
 8003162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003166:	e7c4      	b.n	80030f2 <_printf_common+0x62>
 8003168:	2301      	movs	r3, #1
 800316a:	4622      	mov	r2, r4
 800316c:	4639      	mov	r1, r7
 800316e:	4630      	mov	r0, r6
 8003170:	47c0      	blx	r8
 8003172:	3001      	adds	r0, #1
 8003174:	d0e6      	beq.n	8003144 <_printf_common+0xb4>
 8003176:	f109 0901 	add.w	r9, r9, #1
 800317a:	e7d8      	b.n	800312e <_printf_common+0x9e>

0800317c <_printf_i>:
 800317c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003180:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003184:	460c      	mov	r4, r1
 8003186:	7e09      	ldrb	r1, [r1, #24]
 8003188:	b085      	sub	sp, #20
 800318a:	296e      	cmp	r1, #110	; 0x6e
 800318c:	4617      	mov	r7, r2
 800318e:	4606      	mov	r6, r0
 8003190:	4698      	mov	r8, r3
 8003192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003194:	f000 80b3 	beq.w	80032fe <_printf_i+0x182>
 8003198:	d822      	bhi.n	80031e0 <_printf_i+0x64>
 800319a:	2963      	cmp	r1, #99	; 0x63
 800319c:	d036      	beq.n	800320c <_printf_i+0x90>
 800319e:	d80a      	bhi.n	80031b6 <_printf_i+0x3a>
 80031a0:	2900      	cmp	r1, #0
 80031a2:	f000 80b9 	beq.w	8003318 <_printf_i+0x19c>
 80031a6:	2958      	cmp	r1, #88	; 0x58
 80031a8:	f000 8083 	beq.w	80032b2 <_printf_i+0x136>
 80031ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031b4:	e032      	b.n	800321c <_printf_i+0xa0>
 80031b6:	2964      	cmp	r1, #100	; 0x64
 80031b8:	d001      	beq.n	80031be <_printf_i+0x42>
 80031ba:	2969      	cmp	r1, #105	; 0x69
 80031bc:	d1f6      	bne.n	80031ac <_printf_i+0x30>
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	0605      	lsls	r5, r0, #24
 80031c4:	f103 0104 	add.w	r1, r3, #4
 80031c8:	d52a      	bpl.n	8003220 <_printf_i+0xa4>
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da03      	bge.n	80031da <_printf_i+0x5e>
 80031d2:	222d      	movs	r2, #45	; 0x2d
 80031d4:	425b      	negs	r3, r3
 80031d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031da:	486f      	ldr	r0, [pc, #444]	; (8003398 <_printf_i+0x21c>)
 80031dc:	220a      	movs	r2, #10
 80031de:	e039      	b.n	8003254 <_printf_i+0xd8>
 80031e0:	2973      	cmp	r1, #115	; 0x73
 80031e2:	f000 809d 	beq.w	8003320 <_printf_i+0x1a4>
 80031e6:	d808      	bhi.n	80031fa <_printf_i+0x7e>
 80031e8:	296f      	cmp	r1, #111	; 0x6f
 80031ea:	d020      	beq.n	800322e <_printf_i+0xb2>
 80031ec:	2970      	cmp	r1, #112	; 0x70
 80031ee:	d1dd      	bne.n	80031ac <_printf_i+0x30>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f043 0320 	orr.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	e003      	b.n	8003202 <_printf_i+0x86>
 80031fa:	2975      	cmp	r1, #117	; 0x75
 80031fc:	d017      	beq.n	800322e <_printf_i+0xb2>
 80031fe:	2978      	cmp	r1, #120	; 0x78
 8003200:	d1d4      	bne.n	80031ac <_printf_i+0x30>
 8003202:	2378      	movs	r3, #120	; 0x78
 8003204:	4865      	ldr	r0, [pc, #404]	; (800339c <_printf_i+0x220>)
 8003206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800320a:	e055      	b.n	80032b8 <_printf_i+0x13c>
 800320c:	6813      	ldr	r3, [r2, #0]
 800320e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003212:	1d19      	adds	r1, r3, #4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6011      	str	r1, [r2, #0]
 8003218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800321c:	2301      	movs	r3, #1
 800321e:	e08c      	b.n	800333a <_printf_i+0x1be>
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003226:	6011      	str	r1, [r2, #0]
 8003228:	bf18      	it	ne
 800322a:	b21b      	sxthne	r3, r3
 800322c:	e7cf      	b.n	80031ce <_printf_i+0x52>
 800322e:	6813      	ldr	r3, [r2, #0]
 8003230:	6825      	ldr	r5, [r4, #0]
 8003232:	1d18      	adds	r0, r3, #4
 8003234:	6010      	str	r0, [r2, #0]
 8003236:	0628      	lsls	r0, r5, #24
 8003238:	d501      	bpl.n	800323e <_printf_i+0xc2>
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e002      	b.n	8003244 <_printf_i+0xc8>
 800323e:	0668      	lsls	r0, r5, #25
 8003240:	d5fb      	bpl.n	800323a <_printf_i+0xbe>
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	296f      	cmp	r1, #111	; 0x6f
 8003246:	bf14      	ite	ne
 8003248:	220a      	movne	r2, #10
 800324a:	2208      	moveq	r2, #8
 800324c:	4852      	ldr	r0, [pc, #328]	; (8003398 <_printf_i+0x21c>)
 800324e:	2100      	movs	r1, #0
 8003250:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003254:	6865      	ldr	r5, [r4, #4]
 8003256:	2d00      	cmp	r5, #0
 8003258:	60a5      	str	r5, [r4, #8]
 800325a:	f2c0 8095 	blt.w	8003388 <_printf_i+0x20c>
 800325e:	6821      	ldr	r1, [r4, #0]
 8003260:	f021 0104 	bic.w	r1, r1, #4
 8003264:	6021      	str	r1, [r4, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d13d      	bne.n	80032e6 <_printf_i+0x16a>
 800326a:	2d00      	cmp	r5, #0
 800326c:	f040 808e 	bne.w	800338c <_printf_i+0x210>
 8003270:	4665      	mov	r5, ip
 8003272:	2a08      	cmp	r2, #8
 8003274:	d10b      	bne.n	800328e <_printf_i+0x112>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	07db      	lsls	r3, r3, #31
 800327a:	d508      	bpl.n	800328e <_printf_i+0x112>
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	6862      	ldr	r2, [r4, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	bfde      	ittt	le
 8003284:	2330      	movle	r3, #48	; 0x30
 8003286:	f805 3c01 	strble.w	r3, [r5, #-1]
 800328a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800328e:	ebac 0305 	sub.w	r3, ip, r5
 8003292:	6123      	str	r3, [r4, #16]
 8003294:	f8cd 8000 	str.w	r8, [sp]
 8003298:	463b      	mov	r3, r7
 800329a:	aa03      	add	r2, sp, #12
 800329c:	4621      	mov	r1, r4
 800329e:	4630      	mov	r0, r6
 80032a0:	f7ff fef6 	bl	8003090 <_printf_common>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d14d      	bne.n	8003344 <_printf_i+0x1c8>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	b005      	add	sp, #20
 80032ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032b2:	4839      	ldr	r0, [pc, #228]	; (8003398 <_printf_i+0x21c>)
 80032b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	6821      	ldr	r1, [r4, #0]
 80032bc:	1d1d      	adds	r5, r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6015      	str	r5, [r2, #0]
 80032c2:	060a      	lsls	r2, r1, #24
 80032c4:	d50b      	bpl.n	80032de <_printf_i+0x162>
 80032c6:	07ca      	lsls	r2, r1, #31
 80032c8:	bf44      	itt	mi
 80032ca:	f041 0120 	orrmi.w	r1, r1, #32
 80032ce:	6021      	strmi	r1, [r4, #0]
 80032d0:	b91b      	cbnz	r3, 80032da <_printf_i+0x15e>
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	f022 0220 	bic.w	r2, r2, #32
 80032d8:	6022      	str	r2, [r4, #0]
 80032da:	2210      	movs	r2, #16
 80032dc:	e7b7      	b.n	800324e <_printf_i+0xd2>
 80032de:	064d      	lsls	r5, r1, #25
 80032e0:	bf48      	it	mi
 80032e2:	b29b      	uxthmi	r3, r3
 80032e4:	e7ef      	b.n	80032c6 <_printf_i+0x14a>
 80032e6:	4665      	mov	r5, ip
 80032e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80032ec:	fb02 3311 	mls	r3, r2, r1, r3
 80032f0:	5cc3      	ldrb	r3, [r0, r3]
 80032f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032f6:	460b      	mov	r3, r1
 80032f8:	2900      	cmp	r1, #0
 80032fa:	d1f5      	bne.n	80032e8 <_printf_i+0x16c>
 80032fc:	e7b9      	b.n	8003272 <_printf_i+0xf6>
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	1d18      	adds	r0, r3, #4
 8003304:	6961      	ldr	r1, [r4, #20]
 8003306:	6010      	str	r0, [r2, #0]
 8003308:	0628      	lsls	r0, r5, #24
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	d501      	bpl.n	8003312 <_printf_i+0x196>
 800330e:	6019      	str	r1, [r3, #0]
 8003310:	e002      	b.n	8003318 <_printf_i+0x19c>
 8003312:	066a      	lsls	r2, r5, #25
 8003314:	d5fb      	bpl.n	800330e <_printf_i+0x192>
 8003316:	8019      	strh	r1, [r3, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	4665      	mov	r5, ip
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	e7b9      	b.n	8003294 <_printf_i+0x118>
 8003320:	6813      	ldr	r3, [r2, #0]
 8003322:	1d19      	adds	r1, r3, #4
 8003324:	6011      	str	r1, [r2, #0]
 8003326:	681d      	ldr	r5, [r3, #0]
 8003328:	6862      	ldr	r2, [r4, #4]
 800332a:	2100      	movs	r1, #0
 800332c:	4628      	mov	r0, r5
 800332e:	f000 f837 	bl	80033a0 <memchr>
 8003332:	b108      	cbz	r0, 8003338 <_printf_i+0x1bc>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	6060      	str	r0, [r4, #4]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003342:	e7a7      	b.n	8003294 <_printf_i+0x118>
 8003344:	6923      	ldr	r3, [r4, #16]
 8003346:	462a      	mov	r2, r5
 8003348:	4639      	mov	r1, r7
 800334a:	4630      	mov	r0, r6
 800334c:	47c0      	blx	r8
 800334e:	3001      	adds	r0, #1
 8003350:	d0aa      	beq.n	80032a8 <_printf_i+0x12c>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	079b      	lsls	r3, r3, #30
 8003356:	d413      	bmi.n	8003380 <_printf_i+0x204>
 8003358:	68e0      	ldr	r0, [r4, #12]
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	4298      	cmp	r0, r3
 800335e:	bfb8      	it	lt
 8003360:	4618      	movlt	r0, r3
 8003362:	e7a3      	b.n	80032ac <_printf_i+0x130>
 8003364:	2301      	movs	r3, #1
 8003366:	464a      	mov	r2, r9
 8003368:	4639      	mov	r1, r7
 800336a:	4630      	mov	r0, r6
 800336c:	47c0      	blx	r8
 800336e:	3001      	adds	r0, #1
 8003370:	d09a      	beq.n	80032a8 <_printf_i+0x12c>
 8003372:	3501      	adds	r5, #1
 8003374:	68e3      	ldr	r3, [r4, #12]
 8003376:	9a03      	ldr	r2, [sp, #12]
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	42ab      	cmp	r3, r5
 800337c:	dcf2      	bgt.n	8003364 <_printf_i+0x1e8>
 800337e:	e7eb      	b.n	8003358 <_printf_i+0x1dc>
 8003380:	2500      	movs	r5, #0
 8003382:	f104 0919 	add.w	r9, r4, #25
 8003386:	e7f5      	b.n	8003374 <_printf_i+0x1f8>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ac      	bne.n	80032e6 <_printf_i+0x16a>
 800338c:	7803      	ldrb	r3, [r0, #0]
 800338e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003396:	e76c      	b.n	8003272 <_printf_i+0xf6>
 8003398:	08003651 	.word	0x08003651
 800339c:	08003662 	.word	0x08003662

080033a0 <memchr>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	b2c9      	uxtb	r1, r1
 80033a4:	4402      	add	r2, r0
 80033a6:	4290      	cmp	r0, r2
 80033a8:	4603      	mov	r3, r0
 80033aa:	d101      	bne.n	80033b0 <memchr+0x10>
 80033ac:	2300      	movs	r3, #0
 80033ae:	e003      	b.n	80033b8 <memchr+0x18>
 80033b0:	781c      	ldrb	r4, [r3, #0]
 80033b2:	3001      	adds	r0, #1
 80033b4:	428c      	cmp	r4, r1
 80033b6:	d1f6      	bne.n	80033a6 <memchr+0x6>
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd10      	pop	{r4, pc}

080033bc <memcpy>:
 80033bc:	b510      	push	{r4, lr}
 80033be:	1e43      	subs	r3, r0, #1
 80033c0:	440a      	add	r2, r1
 80033c2:	4291      	cmp	r1, r2
 80033c4:	d100      	bne.n	80033c8 <memcpy+0xc>
 80033c6:	bd10      	pop	{r4, pc}
 80033c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033d0:	e7f7      	b.n	80033c2 <memcpy+0x6>

080033d2 <memmove>:
 80033d2:	4288      	cmp	r0, r1
 80033d4:	b510      	push	{r4, lr}
 80033d6:	eb01 0302 	add.w	r3, r1, r2
 80033da:	d807      	bhi.n	80033ec <memmove+0x1a>
 80033dc:	1e42      	subs	r2, r0, #1
 80033de:	4299      	cmp	r1, r3
 80033e0:	d00a      	beq.n	80033f8 <memmove+0x26>
 80033e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80033ea:	e7f8      	b.n	80033de <memmove+0xc>
 80033ec:	4283      	cmp	r3, r0
 80033ee:	d9f5      	bls.n	80033dc <memmove+0xa>
 80033f0:	1881      	adds	r1, r0, r2
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	42d3      	cmn	r3, r2
 80033f6:	d100      	bne.n	80033fa <memmove+0x28>
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003402:	e7f7      	b.n	80033f4 <memmove+0x22>

08003404 <_free_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4605      	mov	r5, r0
 8003408:	2900      	cmp	r1, #0
 800340a:	d043      	beq.n	8003494 <_free_r+0x90>
 800340c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003410:	1f0c      	subs	r4, r1, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	bfb8      	it	lt
 8003416:	18e4      	addlt	r4, r4, r3
 8003418:	f000 f8d0 	bl	80035bc <__malloc_lock>
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <_free_r+0x94>)
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	4610      	mov	r0, r2
 8003422:	b933      	cbnz	r3, 8003432 <_free_r+0x2e>
 8003424:	6063      	str	r3, [r4, #4]
 8003426:	6014      	str	r4, [r2, #0]
 8003428:	4628      	mov	r0, r5
 800342a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800342e:	f000 b8c6 	b.w	80035be <__malloc_unlock>
 8003432:	42a3      	cmp	r3, r4
 8003434:	d90b      	bls.n	800344e <_free_r+0x4a>
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	1862      	adds	r2, r4, r1
 800343a:	4293      	cmp	r3, r2
 800343c:	bf01      	itttt	eq
 800343e:	681a      	ldreq	r2, [r3, #0]
 8003440:	685b      	ldreq	r3, [r3, #4]
 8003442:	1852      	addeq	r2, r2, r1
 8003444:	6022      	streq	r2, [r4, #0]
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	6004      	str	r4, [r0, #0]
 800344a:	e7ed      	b.n	8003428 <_free_r+0x24>
 800344c:	4613      	mov	r3, r2
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	b10a      	cbz	r2, 8003456 <_free_r+0x52>
 8003452:	42a2      	cmp	r2, r4
 8003454:	d9fa      	bls.n	800344c <_free_r+0x48>
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	1858      	adds	r0, r3, r1
 800345a:	42a0      	cmp	r0, r4
 800345c:	d10b      	bne.n	8003476 <_free_r+0x72>
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	4401      	add	r1, r0
 8003462:	1858      	adds	r0, r3, r1
 8003464:	4282      	cmp	r2, r0
 8003466:	6019      	str	r1, [r3, #0]
 8003468:	d1de      	bne.n	8003428 <_free_r+0x24>
 800346a:	6810      	ldr	r0, [r2, #0]
 800346c:	6852      	ldr	r2, [r2, #4]
 800346e:	4401      	add	r1, r0
 8003470:	6019      	str	r1, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	e7d8      	b.n	8003428 <_free_r+0x24>
 8003476:	d902      	bls.n	800347e <_free_r+0x7a>
 8003478:	230c      	movs	r3, #12
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	e7d4      	b.n	8003428 <_free_r+0x24>
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	1821      	adds	r1, r4, r0
 8003482:	428a      	cmp	r2, r1
 8003484:	bf01      	itttt	eq
 8003486:	6811      	ldreq	r1, [r2, #0]
 8003488:	6852      	ldreq	r2, [r2, #4]
 800348a:	1809      	addeq	r1, r1, r0
 800348c:	6021      	streq	r1, [r4, #0]
 800348e:	6062      	str	r2, [r4, #4]
 8003490:	605c      	str	r4, [r3, #4]
 8003492:	e7c9      	b.n	8003428 <_free_r+0x24>
 8003494:	bd38      	pop	{r3, r4, r5, pc}
 8003496:	bf00      	nop
 8003498:	20000094 	.word	0x20000094

0800349c <_malloc_r>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	1ccd      	adds	r5, r1, #3
 80034a0:	f025 0503 	bic.w	r5, r5, #3
 80034a4:	3508      	adds	r5, #8
 80034a6:	2d0c      	cmp	r5, #12
 80034a8:	bf38      	it	cc
 80034aa:	250c      	movcc	r5, #12
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	4606      	mov	r6, r0
 80034b0:	db01      	blt.n	80034b6 <_malloc_r+0x1a>
 80034b2:	42a9      	cmp	r1, r5
 80034b4:	d903      	bls.n	80034be <_malloc_r+0x22>
 80034b6:	230c      	movs	r3, #12
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	2000      	movs	r0, #0
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
 80034be:	f000 f87d 	bl	80035bc <__malloc_lock>
 80034c2:	4a21      	ldr	r2, [pc, #132]	; (8003548 <_malloc_r+0xac>)
 80034c4:	6814      	ldr	r4, [r2, #0]
 80034c6:	4621      	mov	r1, r4
 80034c8:	b991      	cbnz	r1, 80034f0 <_malloc_r+0x54>
 80034ca:	4c20      	ldr	r4, [pc, #128]	; (800354c <_malloc_r+0xb0>)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	b91b      	cbnz	r3, 80034d8 <_malloc_r+0x3c>
 80034d0:	4630      	mov	r0, r6
 80034d2:	f000 f863 	bl	800359c <_sbrk_r>
 80034d6:	6020      	str	r0, [r4, #0]
 80034d8:	4629      	mov	r1, r5
 80034da:	4630      	mov	r0, r6
 80034dc:	f000 f85e 	bl	800359c <_sbrk_r>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d124      	bne.n	800352e <_malloc_r+0x92>
 80034e4:	230c      	movs	r3, #12
 80034e6:	4630      	mov	r0, r6
 80034e8:	6033      	str	r3, [r6, #0]
 80034ea:	f000 f868 	bl	80035be <__malloc_unlock>
 80034ee:	e7e4      	b.n	80034ba <_malloc_r+0x1e>
 80034f0:	680b      	ldr	r3, [r1, #0]
 80034f2:	1b5b      	subs	r3, r3, r5
 80034f4:	d418      	bmi.n	8003528 <_malloc_r+0x8c>
 80034f6:	2b0b      	cmp	r3, #11
 80034f8:	d90f      	bls.n	800351a <_malloc_r+0x7e>
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	18cc      	adds	r4, r1, r3
 80034fe:	50cd      	str	r5, [r1, r3]
 8003500:	4630      	mov	r0, r6
 8003502:	f000 f85c 	bl	80035be <__malloc_unlock>
 8003506:	f104 000b 	add.w	r0, r4, #11
 800350a:	1d23      	adds	r3, r4, #4
 800350c:	f020 0007 	bic.w	r0, r0, #7
 8003510:	1ac3      	subs	r3, r0, r3
 8003512:	d0d3      	beq.n	80034bc <_malloc_r+0x20>
 8003514:	425a      	negs	r2, r3
 8003516:	50e2      	str	r2, [r4, r3]
 8003518:	e7d0      	b.n	80034bc <_malloc_r+0x20>
 800351a:	684b      	ldr	r3, [r1, #4]
 800351c:	428c      	cmp	r4, r1
 800351e:	bf16      	itet	ne
 8003520:	6063      	strne	r3, [r4, #4]
 8003522:	6013      	streq	r3, [r2, #0]
 8003524:	460c      	movne	r4, r1
 8003526:	e7eb      	b.n	8003500 <_malloc_r+0x64>
 8003528:	460c      	mov	r4, r1
 800352a:	6849      	ldr	r1, [r1, #4]
 800352c:	e7cc      	b.n	80034c8 <_malloc_r+0x2c>
 800352e:	1cc4      	adds	r4, r0, #3
 8003530:	f024 0403 	bic.w	r4, r4, #3
 8003534:	42a0      	cmp	r0, r4
 8003536:	d005      	beq.n	8003544 <_malloc_r+0xa8>
 8003538:	1a21      	subs	r1, r4, r0
 800353a:	4630      	mov	r0, r6
 800353c:	f000 f82e 	bl	800359c <_sbrk_r>
 8003540:	3001      	adds	r0, #1
 8003542:	d0cf      	beq.n	80034e4 <_malloc_r+0x48>
 8003544:	6025      	str	r5, [r4, #0]
 8003546:	e7db      	b.n	8003500 <_malloc_r+0x64>
 8003548:	20000094 	.word	0x20000094
 800354c:	20000098 	.word	0x20000098

08003550 <_realloc_r>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	4607      	mov	r7, r0
 8003554:	4614      	mov	r4, r2
 8003556:	460e      	mov	r6, r1
 8003558:	b921      	cbnz	r1, 8003564 <_realloc_r+0x14>
 800355a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800355e:	4611      	mov	r1, r2
 8003560:	f7ff bf9c 	b.w	800349c <_malloc_r>
 8003564:	b922      	cbnz	r2, 8003570 <_realloc_r+0x20>
 8003566:	f7ff ff4d 	bl	8003404 <_free_r>
 800356a:	4625      	mov	r5, r4
 800356c:	4628      	mov	r0, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003570:	f000 f826 	bl	80035c0 <_malloc_usable_size_r>
 8003574:	42a0      	cmp	r0, r4
 8003576:	d20f      	bcs.n	8003598 <_realloc_r+0x48>
 8003578:	4621      	mov	r1, r4
 800357a:	4638      	mov	r0, r7
 800357c:	f7ff ff8e 	bl	800349c <_malloc_r>
 8003580:	4605      	mov	r5, r0
 8003582:	2800      	cmp	r0, #0
 8003584:	d0f2      	beq.n	800356c <_realloc_r+0x1c>
 8003586:	4631      	mov	r1, r6
 8003588:	4622      	mov	r2, r4
 800358a:	f7ff ff17 	bl	80033bc <memcpy>
 800358e:	4631      	mov	r1, r6
 8003590:	4638      	mov	r0, r7
 8003592:	f7ff ff37 	bl	8003404 <_free_r>
 8003596:	e7e9      	b.n	800356c <_realloc_r+0x1c>
 8003598:	4635      	mov	r5, r6
 800359a:	e7e7      	b.n	800356c <_realloc_r+0x1c>

0800359c <_sbrk_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	2300      	movs	r3, #0
 80035a0:	4c05      	ldr	r4, [pc, #20]	; (80035b8 <_sbrk_r+0x1c>)
 80035a2:	4605      	mov	r5, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	f7fd fbd4 	bl	8000d54 <_sbrk>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_sbrk_r+0x1a>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_sbrk_r+0x1a>
 80035b4:	602b      	str	r3, [r5, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000130 	.word	0x20000130

080035bc <__malloc_lock>:
 80035bc:	4770      	bx	lr

080035be <__malloc_unlock>:
 80035be:	4770      	bx	lr

080035c0 <_malloc_usable_size_r>:
 80035c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c4:	1f18      	subs	r0, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bfbc      	itt	lt
 80035ca:	580b      	ldrlt	r3, [r1, r0]
 80035cc:	18c0      	addlt	r0, r0, r3
 80035ce:	4770      	bx	lr

080035d0 <_init>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr

080035dc <_fini>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr
